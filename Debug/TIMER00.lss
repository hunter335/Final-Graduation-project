
TIMER00.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001a10  00001aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800064  00800064  00001aa8  2**0
                  ALLOC
  3 .stab         000024e4  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000143d  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_10>
      2c:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__vector_11>
      30:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_12>
      34:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <main>
      8a:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MAP>:
static  u8  ADC_Global_copyu8Chainsize;
static  u8  ADC_Global_copyu8ChainIndex = 0 ;
static  u8  ADC_IsrSource ;

s16 MAP(s16 Copy_sint16InputMin, s16 Copy_sint16InputMax, s16 Copy_sint16OutputMin, s16 Copy_sint16OutputMax, s16 Copy_sint16InputValue)
 {
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	62 97       	sbiw	r28, 0x12	; 18
      a0:	0f b6       	in	r0, 0x3f	; 63
      a2:	f8 94       	cli
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	0f be       	out	0x3f, r0	; 63
      a8:	cd bf       	out	0x3d, r28	; 61
      aa:	9a 87       	std	Y+10, r25	; 0x0a
      ac:	89 87       	std	Y+9, r24	; 0x09
      ae:	7c 87       	std	Y+12, r23	; 0x0c
      b0:	6b 87       	std	Y+11, r22	; 0x0b
      b2:	5e 87       	std	Y+14, r21	; 0x0e
      b4:	4d 87       	std	Y+13, r20	; 0x0d
      b6:	38 8b       	std	Y+16, r19	; 0x10
      b8:	2f 87       	std	Y+15, r18	; 0x0f
      ba:	1a 8b       	std	Y+18, r17	; 0x12
      bc:	09 8b       	std	Y+17, r16	; 0x11
	/*Local variable to Store in it the return value*/
	s16 Local_sint16ReturnX;
	/*Calculating the slope of the Linear graph*/
	s16 Slope = (Copy_sint16InputMax-Copy_sint16InputMin)/(Copy_sint16OutputMax-Copy_sint16OutputMin);
      be:	2b 85       	ldd	r18, Y+11	; 0x0b
      c0:	3c 85       	ldd	r19, Y+12	; 0x0c
      c2:	89 85       	ldd	r24, Y+9	; 0x09
      c4:	9a 85       	ldd	r25, Y+10	; 0x0a
      c6:	a9 01       	movw	r20, r18
      c8:	48 1b       	sub	r20, r24
      ca:	59 0b       	sbc	r21, r25
      cc:	2f 85       	ldd	r18, Y+15	; 0x0f
      ce:	38 89       	ldd	r19, Y+16	; 0x10
      d0:	8d 85       	ldd	r24, Y+13	; 0x0d
      d2:	9e 85       	ldd	r25, Y+14	; 0x0e
      d4:	28 1b       	sub	r18, r24
      d6:	39 0b       	sbc	r19, r25
      d8:	ca 01       	movw	r24, r20
      da:	b9 01       	movw	r22, r18
      dc:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__divmodhi4>
      e0:	cb 01       	movw	r24, r22
      e2:	9e 83       	std	Y+6, r25	; 0x06
      e4:	8d 83       	std	Y+5, r24	; 0x05
	/*Getting the Entered Value in the variable Y*/
	s16 Y = Copy_sint16InputValue;
      e6:	89 89       	ldd	r24, Y+17	; 0x11
      e8:	9a 89       	ldd	r25, Y+18	; 0x12
      ea:	9c 83       	std	Y+4, r25	; 0x04
      ec:	8b 83       	std	Y+3, r24	; 0x03
	/*Define a variable to store the opposite value on the line*/
	s16 X = 0;
      ee:	1a 82       	std	Y+2, r1	; 0x02
      f0:	19 82       	std	Y+1, r1	; 0x01

	/*Calculating the wanted oppisite value on the line*/
     X = ((Y - Copy_sint16InputMin)/Slope)+Copy_sint16OutputMin;
      f2:	2b 81       	ldd	r18, Y+3	; 0x03
      f4:	3c 81       	ldd	r19, Y+4	; 0x04
      f6:	89 85       	ldd	r24, Y+9	; 0x09
      f8:	9a 85       	ldd	r25, Y+10	; 0x0a
      fa:	a9 01       	movw	r20, r18
      fc:	48 1b       	sub	r20, r24
      fe:	59 0b       	sbc	r21, r25
     100:	ca 01       	movw	r24, r20
     102:	2d 81       	ldd	r18, Y+5	; 0x05
     104:	3e 81       	ldd	r19, Y+6	; 0x06
     106:	b9 01       	movw	r22, r18
     108:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__divmodhi4>
     10c:	cb 01       	movw	r24, r22
     10e:	9c 01       	movw	r18, r24
     110:	8d 85       	ldd	r24, Y+13	; 0x0d
     112:	9e 85       	ldd	r25, Y+14	; 0x0e
     114:	82 0f       	add	r24, r18
     116:	93 1f       	adc	r25, r19
     118:	9a 83       	std	Y+2, r25	; 0x02
     11a:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the Entered value Smaller than the minimum*/
     if(Copy_sint16InputValue < Copy_sint16InputMin)
     11c:	29 89       	ldd	r18, Y+17	; 0x11
     11e:	3a 89       	ldd	r19, Y+18	; 0x12
     120:	89 85       	ldd	r24, Y+9	; 0x09
     122:	9a 85       	ldd	r25, Y+10	; 0x0a
     124:	28 17       	cp	r18, r24
     126:	39 07       	cpc	r19, r25
     128:	2c f4       	brge	.+10     	; 0x134 <MAP+0xa2>
     {
		/*Return the MIN value*/
    	 Local_sint16ReturnX = Copy_sint16OutputMin;
     12a:	8d 85       	ldd	r24, Y+13	; 0x0d
     12c:	9e 85       	ldd	r25, Y+14	; 0x0e
     12e:	98 87       	std	Y+8, r25	; 0x08
     130:	8f 83       	std	Y+7, r24	; 0x07
     132:	10 c0       	rjmp	.+32     	; 0x154 <MAP+0xc2>
     }
	 /*Check if the Entered value Bigger than the maximum*/
     else if(Copy_sint16InputValue > Copy_sint16InputMax)
     134:	29 89       	ldd	r18, Y+17	; 0x11
     136:	3a 89       	ldd	r19, Y+18	; 0x12
     138:	8b 85       	ldd	r24, Y+11	; 0x0b
     13a:	9c 85       	ldd	r25, Y+12	; 0x0c
     13c:	82 17       	cp	r24, r18
     13e:	93 07       	cpc	r25, r19
     140:	2c f4       	brge	.+10     	; 0x14c <MAP+0xba>
     {
		/*Return the MAX value*/
    	 Local_sint16ReturnX = Copy_sint16OutputMax;
     142:	8f 85       	ldd	r24, Y+15	; 0x0f
     144:	98 89       	ldd	r25, Y+16	; 0x10
     146:	98 87       	std	Y+8, r25	; 0x08
     148:	8f 83       	std	Y+7, r24	; 0x07
     14a:	04 c0       	rjmp	.+8      	; 0x154 <MAP+0xc2>
     }
     else
     {
		/*Return the Calculated value*/
    	 Local_sint16ReturnX = X;
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	9a 81       	ldd	r25, Y+2	; 0x02
     150:	98 87       	std	Y+8, r25	; 0x08
     152:	8f 83       	std	Y+7, r24	; 0x07
     }


    return Local_sint16ReturnX;
     154:	8f 81       	ldd	r24, Y+7	; 0x07
     156:	98 85       	ldd	r25, Y+8	; 0x08
 }
     158:	62 96       	adiw	r28, 0x12	; 18
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	cf 91       	pop	r28
     166:	df 91       	pop	r29
     168:	1f 91       	pop	r17
     16a:	0f 91       	pop	r16
     16c:	08 95       	ret

0000016e <ADC_voidInit>:
void ADC_voidInit(void)
{
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
	/*ADC Enable*/
	SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADEN);
     176:	a6 e2       	ldi	r26, 0x26	; 38
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	e6 e2       	ldi	r30, 0x26	; 38
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	80 68       	ori	r24, 0x80	; 128
     182:	8c 93       	st	X, r24
	/*ADC Prescaler Selections*/
	SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADPS0);
     184:	a6 e2       	ldi	r26, 0x26	; 38
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	e6 e2       	ldi	r30, 0x26	; 38
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	81 60       	ori	r24, 0x01	; 1
     190:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADPS1);
     192:	a6 e2       	ldi	r26, 0x26	; 38
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	e6 e2       	ldi	r30, 0x26	; 38
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	82 60       	ori	r24, 0x02	; 2
     19e:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADPS2);
     1a0:	a6 e2       	ldi	r26, 0x26	; 38
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e6 e2       	ldi	r30, 0x26	; 38
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	84 60       	ori	r24, 0x04	; 4
     1ac:	8c 93       	st	X, r24
	/*Voltage Reference Selection*/
#if VOLTAGE_REFRENCE == AREF
	CLR_BIT(ADC_ADMUX,ADC_ADMUX_REFS0);
	CLR_BIT(ADC_ADMUX,ADC_ADMUX_REFS1);
#elif VOLTAGE_REFRENCE == AVCC
	SET_BIT(ADC_ADMUX,ADC_ADMUX_REFS0);
     1ae:	a7 e2       	ldi	r26, 0x27	; 39
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e7 e2       	ldi	r30, 0x27	; 39
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 64       	ori	r24, 0x40	; 64
     1ba:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX,ADC_ADMUX_REFS1);
     1bc:	a7 e2       	ldi	r26, 0x27	; 39
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	e7 e2       	ldi	r30, 0x27	; 39
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	8f 77       	andi	r24, 0x7F	; 127
     1c8:	8c 93       	st	X, r24
	SET_BIT(ADC_ADMUX,ADC_ADMUX_REFS1);
#endif
	/*ADC  Adjust Result*/

#if RESOLUTION == TEN_BITS
	CLR_BIT(ADC_ADMUX,ADC_ADMUX_ADLAR);
     1ca:	a7 e2       	ldi	r26, 0x27	; 39
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	e7 e2       	ldi	r30, 0x27	; 39
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	8f 7d       	andi	r24, 0xDF	; 223
     1d6:	8c 93       	st	X, r24
#elif RESOLUTION == EIGHT_BITS
	SET_BIT(ADC_ADMUX,ADC_ADMUX_ADLAR);
#endif
}
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	08 95       	ret

000001de <ADC_u8Read>:


u8 ADC_u8Read(u8 copy_u8Channel , u8 *copy_pu8Result)
{
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	28 97       	sbiw	r28, 0x08	; 8
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	8e 83       	std	Y+6, r24	; 0x06
     1f4:	78 87       	std	Y+8, r23	; 0x08
     1f6:	6f 83       	std	Y+7, r22	; 0x07

	u8 Local_u8ErrorState = OK ;
     1f8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter = 0  ;
     1fa:	19 82       	std	Y+1, r1	; 0x01
     1fc:	1a 82       	std	Y+2, r1	; 0x02
     1fe:	1b 82       	std	Y+3, r1	; 0x03
     200:	1c 82       	std	Y+4, r1	; 0x04
	if (ADC_u8BusyState == IDLE)
     202:	80 91 6a 00 	lds	r24, 0x006A
     206:	88 23       	and	r24, r24
     208:	09 f0       	breq	.+2      	; 0x20c <ADC_u8Read+0x2e>
     20a:	5e c0       	rjmp	.+188    	; 0x2c8 <ADC_u8Read+0xea>
	{
		ADC_u8BusyState = BUSY ;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 93 6a 00 	sts	0x006A, r24
		if (copy_pu8Result != NULL)
     212:	8f 81       	ldd	r24, Y+7	; 0x07
     214:	98 85       	ldd	r25, Y+8	; 0x08
     216:	00 97       	sbiw	r24, 0x00	; 0
     218:	09 f4       	brne	.+2      	; 0x21c <ADC_u8Read+0x3e>
     21a:	53 c0       	rjmp	.+166    	; 0x2c2 <ADC_u8Read+0xe4>
		{

			ADC_ADMUX = ((ADC_ADMUX) & (0b11100000)) | (copy_u8Channel) ; // selecting the channel
     21c:	a7 e2       	ldi	r26, 0x27	; 39
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e7 e2       	ldi	r30, 0x27	; 39
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	98 2f       	mov	r25, r24
     228:	90 7e       	andi	r25, 0xE0	; 224
     22a:	8e 81       	ldd	r24, Y+6	; 0x06
     22c:	89 2b       	or	r24, r25
     22e:	8c 93       	st	X, r24
			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADSC); // starting conversion
     230:	a6 e2       	ldi	r26, 0x26	; 38
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	e6 e2       	ldi	r30, 0x26	; 38
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	80 64       	ori	r24, 0x40	; 64
     23c:	8c 93       	st	X, r24
     23e:	0b c0       	rjmp	.+22     	; 0x256 <ADC_u8Read+0x78>

			while ( (GET_BIT(ADC_ADCSRA ,ADC_ADCSRA_ADIF)!= 1) && (Local_u32Counter != ADC_TIMEOUT) )
			{
				Local_u32Counter++;
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	9a 81       	ldd	r25, Y+2	; 0x02
     244:	ab 81       	ldd	r26, Y+3	; 0x03
     246:	bc 81       	ldd	r27, Y+4	; 0x04
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	a1 1d       	adc	r26, r1
     24c:	b1 1d       	adc	r27, r1
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	ab 83       	std	Y+3, r26	; 0x03
     254:	bc 83       	std	Y+4, r27	; 0x04
		{

			ADC_ADMUX = ((ADC_ADMUX) & (0b11100000)) | (copy_u8Channel) ; // selecting the channel
			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADSC); // starting conversion

			while ( (GET_BIT(ADC_ADCSRA ,ADC_ADCSRA_ADIF)!= 1) && (Local_u32Counter != ADC_TIMEOUT) )
     256:	e6 e2       	ldi	r30, 0x26	; 38
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	82 95       	swap	r24
     25e:	8f 70       	andi	r24, 0x0F	; 15
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	81 70       	andi	r24, 0x01	; 1
     266:	90 70       	andi	r25, 0x00	; 0
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	61 f4       	brne	.+24     	; 0x284 <ADC_u8Read+0xa6>
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	9a 81       	ldd	r25, Y+2	; 0x02
     270:	ab 81       	ldd	r26, Y+3	; 0x03
     272:	bc 81       	ldd	r27, Y+4	; 0x04
     274:	80 35       	cpi	r24, 0x50	; 80
     276:	23 ec       	ldi	r18, 0xC3	; 195
     278:	92 07       	cpc	r25, r18
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	a2 07       	cpc	r26, r18
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	b2 07       	cpc	r27, r18
     282:	f1 f6       	brne	.-68     	; 0x240 <ADC_u8Read+0x62>
			{
				Local_u32Counter++;
			}
			if (Local_u32Counter == ADC_TIMEOUT)
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	ab 81       	ldd	r26, Y+3	; 0x03
     28a:	bc 81       	ldd	r27, Y+4	; 0x04
     28c:	80 35       	cpi	r24, 0x50	; 80
     28e:	23 ec       	ldi	r18, 0xC3	; 195
     290:	92 07       	cpc	r25, r18
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	a2 07       	cpc	r26, r18
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	b2 07       	cpc	r27, r18
     29a:	11 f4       	brne	.+4      	; 0x2a0 <ADC_u8Read+0xc2>
			{
				Local_u8ErrorState = 1 ;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	8d 83       	std	Y+5, r24	; 0x05
			}
			else
			{
				/* the conversion has completed before the time out */
			}
			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADIF);
     2a0:	a6 e2       	ldi	r26, 0x26	; 38
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	e6 e2       	ldi	r30, 0x26	; 38
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 81       	ld	r24, Z
     2aa:	80 61       	ori	r24, 0x10	; 16
     2ac:	8c 93       	st	X, r24


			*copy_pu8Result = ADC_ADCL ;
     2ae:	e4 e2       	ldi	r30, 0x24	; 36
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	91 81       	ldd	r25, Z+1	; 0x01
     2b6:	ef 81       	ldd	r30, Y+7	; 0x07
     2b8:	f8 85       	ldd	r31, Y+8	; 0x08
     2ba:	80 83       	st	Z, r24
			ADC_u8BusyState = IDLE ;
     2bc:	10 92 6a 00 	sts	0x006A, r1
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <ADC_u8Read+0xee>

		}
		else
		{
			Local_u8ErrorState= NULL_POINTER ;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	8d 83       	std	Y+5, r24	; 0x05
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <ADC_u8Read+0xee>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC ;
     2c8:	83 e0       	ldi	r24, 0x03	; 3
     2ca:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState ;
     2cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     2ce:	28 96       	adiw	r28, 0x08	; 8
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <ADC_u8ReadI>:
u8 ADC_u8ReadI(u8 copy_u8Channel, u16 * copy_pu16Result,void(*copy_pu8CallBack)(void))
{
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <ADC_u8ReadI+0x6>
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <ADC_u8ReadI+0x8>
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <ADC_u8ReadI+0xa>
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	8a 83       	std	Y+2, r24	; 0x02
     2f0:	7c 83       	std	Y+4, r23	; 0x04
     2f2:	6b 83       	std	Y+3, r22	; 0x03
     2f4:	5e 83       	std	Y+6, r21	; 0x06
     2f6:	4d 83       	std	Y+5, r20	; 0x05
	u8  Local_u8ErrorState = OK ;
     2f8:	19 82       	std	Y+1, r1	; 0x01
	if ((copy_pu16Result == NULL) || (copy_pu8CallBack == NULL))
     2fa:	8b 81       	ldd	r24, Y+3	; 0x03
     2fc:	9c 81       	ldd	r25, Y+4	; 0x04
     2fe:	00 97       	sbiw	r24, 0x00	; 0
     300:	21 f0       	breq	.+8      	; 0x30a <ADC_u8ReadI+0x2a>
     302:	8d 81       	ldd	r24, Y+5	; 0x05
     304:	9e 81       	ldd	r25, Y+6	; 0x06
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	19 f4       	brne	.+6      	; 0x310 <ADC_u8ReadI+0x30>
	{
		Local_u8ErrorState = NULL_POINTER ;
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	89 83       	std	Y+1, r24	; 0x01
     30e:	34 c0       	rjmp	.+104    	; 0x378 <ADC_u8ReadI+0x98>
	}
	else
	{
		if (ADC_u8BusyState==IDLE)
     310:	80 91 6a 00 	lds	r24, 0x006A
     314:	88 23       	and	r24, r24
     316:	51 f5       	brne	.+84     	; 0x36c <ADC_u8ReadI+0x8c>
		{
			ADC_u8BusyState = BUSY ; // making adc busy
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 6a 00 	sts	0x006A, r24
			ADC_IsrSource = SINGLE_CHANNEL_ASYNC ;// setting the interrupt soucrce for isr
     31e:	10 92 71 00 	sts	0x0071, r1
			ADC_Global_pu16Result=copy_pu16Result ; // making local result global for isr
     322:	8b 81       	ldd	r24, Y+3	; 0x03
     324:	9c 81       	ldd	r25, Y+4	; 0x04
     326:	90 93 67 00 	sts	0x0067, r25
     32a:	80 93 66 00 	sts	0x0066, r24
			ADC_Global_pu8NotificationFunc = copy_pu8CallBack ; // making local function global for isr
     32e:	8d 81       	ldd	r24, Y+5	; 0x05
     330:	9e 81       	ldd	r25, Y+6	; 0x06
     332:	90 93 65 00 	sts	0x0065, r25
     336:	80 93 64 00 	sts	0x0064, r24
			ADC_ADMUX = ((ADC_ADMUX) & (0b11100000)) | (copy_u8Channel) ; // selecting the channel
     33a:	a7 e2       	ldi	r26, 0x27	; 39
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e7 e2       	ldi	r30, 0x27	; 39
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	98 2f       	mov	r25, r24
     346:	90 7e       	andi	r25, 0xE0	; 224
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	89 2b       	or	r24, r25
     34c:	8c 93       	st	X, r24

			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADSC); // starting conversion
     34e:	a6 e2       	ldi	r26, 0x26	; 38
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e6 e2       	ldi	r30, 0x26	; 38
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	80 64       	ori	r24, 0x40	; 64
     35a:	8c 93       	st	X, r24
			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADIE); // enable interuppt
     35c:	a6 e2       	ldi	r26, 0x26	; 38
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	e6 e2       	ldi	r30, 0x26	; 38
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	88 60       	ori	r24, 0x08	; 8
     368:	8c 93       	st	X, r24
     36a:	06 c0       	rjmp	.+12     	; 0x378 <ADC_u8ReadI+0x98>
		}
		else if (ADC_u8BusyState == BUSY)
     36c:	80 91 6a 00 	lds	r24, 0x006A
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	11 f4       	brne	.+4      	; 0x378 <ADC_u8ReadI+0x98>
		{
			Local_u8ErrorState = BUSY_FUNC;
     374:	83 e0       	ldi	r24, 0x03	; 3
     376:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
     378:	89 81       	ldd	r24, Y+1	; 0x01

}
     37a:	26 96       	adiw	r28, 0x06	; 6
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <ADC_u8ReadChainI>:
u8 ADC_u8ReadChainI(chain_t * copy_Chain)
{
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	00 d0       	rcall	.+0      	; 0x392 <ADC_u8ReadChainI+0x6>
     392:	0f 92       	push	r0
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	9b 83       	std	Y+3, r25	; 0x03
     39a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     39c:	19 82       	std	Y+1, r1	; 0x01
	if (copy_Chain == NULL)
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	9b 81       	ldd	r25, Y+3	; 0x03
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	19 f4       	brne	.+6      	; 0x3ac <ADC_u8ReadChainI+0x20>
	{
		Local_u8ErrorState = NULL_POINTER ;
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	89 83       	std	Y+1, r24	; 0x01
     3aa:	52 c0       	rjmp	.+164    	; 0x450 <ADC_u8ReadChainI+0xc4>
	}
	else
	{
		if (ADC_u8BusyState == IDLE)
     3ac:	80 91 6a 00 	lds	r24, 0x006A
     3b0:	88 23       	and	r24, r24
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <ADC_u8ReadChainI+0x2a>
     3b4:	47 c0       	rjmp	.+142    	; 0x444 <ADC_u8ReadChainI+0xb8>
		{
			ADC_u8BusyState = BUSY ; // Making ADC Busy
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 6a 00 	sts	0x006A, r24
			ADC_IsrSource = CHAIN_ASYNC ; // setting the interrupt soucrce for isr
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 71 00 	sts	0x0071, r24
			/*intializing local to global to use them in isr*/
			ADC_Global_pu8ChannelArray = copy_Chain ->Channels;
     3c2:	ea 81       	ldd	r30, Y+2	; 0x02
     3c4:	fb 81       	ldd	r31, Y+3	; 0x03
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	90 93 6c 00 	sts	0x006C, r25
     3ce:	80 93 6b 00 	sts	0x006B, r24
			ADC_Global_copyu8Chainsize = copy_Chain ->size;
     3d2:	ea 81       	ldd	r30, Y+2	; 0x02
     3d4:	fb 81       	ldd	r31, Y+3	; 0x03
     3d6:	84 81       	ldd	r24, Z+4	; 0x04
     3d8:	80 93 70 00 	sts	0x0070, r24
			ADC_Global_pu16ResultArray = copy_Chain -> result;
     3dc:	ea 81       	ldd	r30, Y+2	; 0x02
     3de:	fb 81       	ldd	r31, Y+3	; 0x03
     3e0:	82 81       	ldd	r24, Z+2	; 0x02
     3e2:	93 81       	ldd	r25, Z+3	; 0x03
     3e4:	90 93 6e 00 	sts	0x006E, r25
     3e8:	80 93 6d 00 	sts	0x006D, r24
			ADC_Global_pu8NotificationFunc = copy_Chain->NotiFunc;
     3ec:	ea 81       	ldd	r30, Y+2	; 0x02
     3ee:	fb 81       	ldd	r31, Y+3	; 0x03
     3f0:	85 81       	ldd	r24, Z+5	; 0x05
     3f2:	96 81       	ldd	r25, Z+6	; 0x06
     3f4:	90 93 65 00 	sts	0x0065, r25
     3f8:	80 93 64 00 	sts	0x0064, r24
			ADC_ADMUX = ((ADC_ADMUX) & (0b11100000)) | (ADC_Global_pu8ChannelArray[ADC_Global_copyu8ChainIndex]);
     3fc:	a7 e2       	ldi	r26, 0x27	; 39
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	e7 e2       	ldi	r30, 0x27	; 39
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	48 2f       	mov	r20, r24
     408:	40 7e       	andi	r20, 0xE0	; 224
     40a:	20 91 6b 00 	lds	r18, 0x006B
     40e:	30 91 6c 00 	lds	r19, 0x006C
     412:	80 91 6f 00 	lds	r24, 0x006F
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	f9 01       	movw	r30, r18
     41c:	e8 0f       	add	r30, r24
     41e:	f9 1f       	adc	r31, r25
     420:	80 81       	ld	r24, Z
     422:	84 2b       	or	r24, r20
     424:	8c 93       	st	X, r24
			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADSC); // starting conversion
     426:	a6 e2       	ldi	r26, 0x26	; 38
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	e6 e2       	ldi	r30, 0x26	; 38
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	80 64       	ori	r24, 0x40	; 64
     432:	8c 93       	st	X, r24
			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADIE); // enable interuppt
     434:	a6 e2       	ldi	r26, 0x26	; 38
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	e6 e2       	ldi	r30, 0x26	; 38
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	88 60       	ori	r24, 0x08	; 8
     440:	8c 93       	st	X, r24
     442:	06 c0       	rjmp	.+12     	; 0x450 <ADC_u8ReadChainI+0xc4>




		}
		else if (ADC_u8BusyState == BUSY)
     444:	80 91 6a 00 	lds	r24, 0x006A
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	11 f4       	brne	.+4      	; 0x450 <ADC_u8ReadChainI+0xc4>
		{
			Local_u8ErrorState = BUSY_FUNC ;
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	89 83       	std	Y+1, r24	; 0x01

		}
	}


	return Local_u8ErrorState ;
     450:	89 81       	ldd	r24, Y+1	; 0x01
}
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	08 95       	ret

0000045e <__vector_16>:
void __vector_16 (void)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
     480:	df 93       	push	r29
     482:	cf 93       	push	r28
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
	if (ADC_IsrSource == SINGLE_CHANNEL_ASYNC)
     488:	80 91 71 00 	lds	r24, 0x0071
     48c:	88 23       	and	r24, r24
     48e:	c9 f4       	brne	.+50     	; 0x4c2 <__vector_16+0x64>
	{

		* ADC_Global_pu16Result = ADC_ADCL ;
     490:	a0 91 66 00 	lds	r26, 0x0066
     494:	b0 91 67 00 	lds	r27, 0x0067
     498:	e4 e2       	ldi	r30, 0x24	; 36
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	91 81       	ldd	r25, Z+1	; 0x01
     4a0:	8d 93       	st	X+, r24
     4a2:	9c 93       	st	X, r25
		ADC_u8BusyState = IDLE ;
     4a4:	10 92 6a 00 	sts	0x006A, r1

		ADC_Global_pu8NotificationFunc();
     4a8:	e0 91 64 00 	lds	r30, 0x0064
     4ac:	f0 91 65 00 	lds	r31, 0x0065
     4b0:	09 95       	icall

		CLR_BIT(ADC_ADCSRA,ADC_ADCSRA_ADIE); // disable interrupt
     4b2:	a6 e2       	ldi	r26, 0x26	; 38
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	e6 e2       	ldi	r30, 0x26	; 38
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	87 7f       	andi	r24, 0xF7	; 247
     4be:	8c 93       	st	X, r24
     4c0:	51 c0       	rjmp	.+162    	; 0x564 <__vector_16+0x106>
	}
	else if (ADC_IsrSource == CHAIN_ASYNC)
     4c2:	80 91 71 00 	lds	r24, 0x0071
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	09 f0       	breq	.+2      	; 0x4cc <__vector_16+0x6e>
     4ca:	4c c0       	rjmp	.+152    	; 0x564 <__vector_16+0x106>
	{
		ADC_Global_pu16ResultArray[ADC_Global_copyu8ChainIndex] =ADC_ADCL;
     4cc:	20 91 6d 00 	lds	r18, 0x006D
     4d0:	30 91 6e 00 	lds	r19, 0x006E
     4d4:	80 91 6f 00 	lds	r24, 0x006F
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	d9 01       	movw	r26, r18
     4e2:	a8 0f       	add	r26, r24
     4e4:	b9 1f       	adc	r27, r25
     4e6:	e4 e2       	ldi	r30, 0x24	; 36
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	91 81       	ldd	r25, Z+1	; 0x01
     4ee:	11 96       	adiw	r26, 0x01	; 1
     4f0:	9c 93       	st	X, r25
     4f2:	8e 93       	st	-X, r24
		ADC_Global_copyu8ChainIndex++;
     4f4:	80 91 6f 00 	lds	r24, 0x006F
     4f8:	8f 5f       	subi	r24, 0xFF	; 255
     4fa:	80 93 6f 00 	sts	0x006F, r24

		if (ADC_Global_copyu8ChainIndex == ADC_Global_copyu8Chainsize)
     4fe:	90 91 6f 00 	lds	r25, 0x006F
     502:	80 91 70 00 	lds	r24, 0x0070
     506:	98 17       	cp	r25, r24
     508:	89 f4       	brne	.+34     	; 0x52c <__vector_16+0xce>
		{
			/*Finished*/
			ADC_u8BusyState = IDLE ;
     50a:	10 92 6a 00 	sts	0x006A, r1
			ADC_Global_pu8NotificationFunc();
     50e:	e0 91 64 00 	lds	r30, 0x0064
     512:	f0 91 65 00 	lds	r31, 0x0065
     516:	09 95       	icall
			CLR_BIT(ADC_ADCSRA,ADC_ADCSRA_ADIE); // disable interrupt
     518:	a6 e2       	ldi	r26, 0x26	; 38
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	e6 e2       	ldi	r30, 0x26	; 38
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	87 7f       	andi	r24, 0xF7	; 247
     524:	8c 93       	st	X, r24
			ADC_Global_copyu8ChainIndex =0 ;
     526:	10 92 6f 00 	sts	0x006F, r1
     52a:	1c c0       	rjmp	.+56     	; 0x564 <__vector_16+0x106>
		}
		else
		{
			/*Not Finished*/
			/*Set New Channel*/
			ADC_ADMUX=((ADC_ADMUX) & (0b11100000)) | (ADC_Global_pu8ChannelArray[ADC_Global_copyu8ChainIndex]);
     52c:	a7 e2       	ldi	r26, 0x27	; 39
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	e7 e2       	ldi	r30, 0x27	; 39
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	48 2f       	mov	r20, r24
     538:	40 7e       	andi	r20, 0xE0	; 224
     53a:	20 91 6b 00 	lds	r18, 0x006B
     53e:	30 91 6c 00 	lds	r19, 0x006C
     542:	80 91 6f 00 	lds	r24, 0x006F
     546:	88 2f       	mov	r24, r24
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	e8 0f       	add	r30, r24
     54e:	f9 1f       	adc	r31, r25
     550:	80 81       	ld	r24, Z
     552:	84 2b       	or	r24, r20
     554:	8c 93       	st	X, r24
			SET_BIT(ADC_ADCSRA,ADC_ADCSRA_ADSC); // starting conversion
     556:	a6 e2       	ldi	r26, 0x26	; 38
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	e6 e2       	ldi	r30, 0x26	; 38
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	80 64       	ori	r24, 0x40	; 64
     562:	8c 93       	st	X, r24


		}

	}
}
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	ff 91       	pop	r31
     56a:	ef 91       	pop	r30
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	7f 91       	pop	r23
     576:	6f 91       	pop	r22
     578:	5f 91       	pop	r21
     57a:	4f 91       	pop	r20
     57c:	3f 91       	pop	r19
     57e:	2f 91       	pop	r18
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <MDIO_voidSetPortDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	00 d0       	rcall	.+0      	; 0x590 <MDIO_voidSetPortDirection+0x6>
     590:	00 d0       	rcall	.+0      	; 0x592 <MDIO_voidSetPortDirection+0x8>
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	28 2f       	mov	r18, r24
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	3c 83       	std	Y+4, r19	; 0x04
     5a2:	2b 83       	std	Y+3, r18	; 0x03
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	91 05       	cpc	r25, r1
     5ac:	21 f1       	breq	.+72     	; 0x5f6 <MDIO_voidSetPortDirection+0x6c>
     5ae:	2b 81       	ldd	r18, Y+3	; 0x03
     5b0:	3c 81       	ldd	r19, Y+4	; 0x04
     5b2:	22 30       	cpi	r18, 0x02	; 2
     5b4:	31 05       	cpc	r19, r1
     5b6:	2c f4       	brge	.+10     	; 0x5c2 <MDIO_voidSetPortDirection+0x38>
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	61 f0       	breq	.+24     	; 0x5d8 <MDIO_voidSetPortDirection+0x4e>
     5c0:	46 c0       	rjmp	.+140    	; 0x64e <MDIO_voidSetPortDirection+0xc4>
     5c2:	2b 81       	ldd	r18, Y+3	; 0x03
     5c4:	3c 81       	ldd	r19, Y+4	; 0x04
     5c6:	22 30       	cpi	r18, 0x02	; 2
     5c8:	31 05       	cpc	r19, r1
     5ca:	21 f1       	breq	.+72     	; 0x614 <MDIO_voidSetPortDirection+0x8a>
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	91 05       	cpc	r25, r1
     5d4:	71 f1       	breq	.+92     	; 0x632 <MDIO_voidSetPortDirection+0xa8>
     5d6:	3b c0       	rjmp	.+118    	; 0x64e <MDIO_voidSetPortDirection+0xc4>
	{
		case PORTA: if(copy_u8PortDirection == OUTPUT)
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	29 f4       	brne	.+10     	; 0x5e8 <MDIO_voidSetPortDirection+0x5e>
		            {
		                DDRA_REG = 0xFF;	
     5de:	ea e3       	ldi	r30, 0x3A	; 58
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
     5e4:	80 83       	st	Z, r24
     5e6:	33 c0       	rjmp	.+102    	; 0x64e <MDIO_voidSetPortDirection+0xc4>
		            }
					else if(copy_u8PortDirection == INPUT)
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ea:	88 23       	and	r24, r24
     5ec:	81 f5       	brne	.+96     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
					{
						DDRA_REG = 0x00;
     5ee:	ea e3       	ldi	r30, 0x3A	; 58
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	10 82       	st	Z, r1
     5f4:	2c c0       	rjmp	.+88     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
					else
					{
						//error
					}
					break;
		case PORTB: if(copy_u8PortDirection == OUTPUT)
     5f6:	8a 81       	ldd	r24, Y+2	; 0x02
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	29 f4       	brne	.+10     	; 0x606 <MDIO_voidSetPortDirection+0x7c>
		            {
		                DDRB_REG = 0xFF;	
     5fc:	e7 e3       	ldi	r30, 0x37	; 55
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	80 83       	st	Z, r24
     604:	24 c0       	rjmp	.+72     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
		            }
					else if(copy_u8PortDirection == INPUT)
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	88 23       	and	r24, r24
     60a:	09 f5       	brne	.+66     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
					{
						DDRB_REG = 0x00;
     60c:	e7 e3       	ldi	r30, 0x37	; 55
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	10 82       	st	Z, r1
     612:	1d c0       	rjmp	.+58     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
					else
					{
						//error
					}
					break;
		case PORTC: if(copy_u8PortDirection == OUTPUT)
     614:	8a 81       	ldd	r24, Y+2	; 0x02
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	29 f4       	brne	.+10     	; 0x624 <MDIO_voidSetPortDirection+0x9a>
		            {
		                DDRC_REG = 0xFF;	
     61a:	e4 e3       	ldi	r30, 0x34	; 52
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	80 83       	st	Z, r24
     622:	15 c0       	rjmp	.+42     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
		            }
					else if(copy_u8PortDirection == INPUT)
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	88 23       	and	r24, r24
     628:	91 f4       	brne	.+36     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
					{
						DDRC_REG = 0x00;
     62a:	e4 e3       	ldi	r30, 0x34	; 52
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	10 82       	st	Z, r1
     630:	0e c0       	rjmp	.+28     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
					else
					{
						//error
					}
					break;
		case PORTD: if(copy_u8PortDirection == OUTPUT)
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	29 f4       	brne	.+10     	; 0x642 <MDIO_voidSetPortDirection+0xb8>
		            {
		                DDRD_REG = 0xFF;	
     638:	e1 e3       	ldi	r30, 0x31	; 49
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	80 83       	st	Z, r24
     640:	06 c0       	rjmp	.+12     	; 0x64e <MDIO_voidSetPortDirection+0xc4>
		            }
					else if(copy_u8PortDirection == INPUT)
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	88 23       	and	r24, r24
     646:	19 f4       	brne	.+6      	; 0x64e <MDIO_voidSetPortDirection+0xc4>
					{
						DDRD_REG = 0x00;
     648:	e1 e3       	ldi	r30, 0x31	; 49
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	10 82       	st	Z, r1
						//error
					}
					break;
		default: /* invalid port id */ break;
	}
}
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	08 95       	ret

0000065c <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	00 d0       	rcall	.+0      	; 0x662 <MDIO_voidSetPortValue+0x6>
     662:	00 d0       	rcall	.+0      	; 0x664 <MDIO_voidSetPortValue+0x8>
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	89 83       	std	Y+1, r24	; 0x01
     66a:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8PortId)
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	28 2f       	mov	r18, r24
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	3c 83       	std	Y+4, r19	; 0x04
     674:	2b 83       	std	Y+3, r18	; 0x03
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	91 05       	cpc	r25, r1
     67e:	49 f1       	breq	.+82     	; 0x6d2 <MDIO_voidSetPortValue+0x76>
     680:	2b 81       	ldd	r18, Y+3	; 0x03
     682:	3c 81       	ldd	r19, Y+4	; 0x04
     684:	22 30       	cpi	r18, 0x02	; 2
     686:	31 05       	cpc	r19, r1
     688:	2c f4       	brge	.+10     	; 0x694 <MDIO_voidSetPortValue+0x38>
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
     68c:	9c 81       	ldd	r25, Y+4	; 0x04
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	61 f0       	breq	.+24     	; 0x6aa <MDIO_voidSetPortValue+0x4e>
     692:	5a c0       	rjmp	.+180    	; 0x748 <MDIO_voidSetPortValue+0xec>
     694:	2b 81       	ldd	r18, Y+3	; 0x03
     696:	3c 81       	ldd	r19, Y+4	; 0x04
     698:	22 30       	cpi	r18, 0x02	; 2
     69a:	31 05       	cpc	r19, r1
     69c:	71 f1       	breq	.+92     	; 0x6fa <MDIO_voidSetPortValue+0x9e>
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	83 30       	cpi	r24, 0x03	; 3
     6a4:	91 05       	cpc	r25, r1
     6a6:	e9 f1       	breq	.+122    	; 0x722 <MDIO_voidSetPortValue+0xc6>
     6a8:	4f c0       	rjmp	.+158    	; 0x748 <MDIO_voidSetPortValue+0xec>
	{
		case PORTA: if(copy_u8PortValue == HIGH)
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	29 f4       	brne	.+10     	; 0x6ba <MDIO_voidSetPortValue+0x5e>
		            {
		                PORTA_REG = 0xFF;	
     6b0:	eb e3       	ldi	r30, 0x3B	; 59
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	80 83       	st	Z, r24
     6b8:	47 c0       	rjmp	.+142    	; 0x748 <MDIO_voidSetPortValue+0xec>
		            }
					else if(copy_u8PortValue == LOW)
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	88 23       	and	r24, r24
     6be:	21 f4       	brne	.+8      	; 0x6c8 <MDIO_voidSetPortValue+0x6c>
					{
						PORTA_REG = 0x00;
     6c0:	eb e3       	ldi	r30, 0x3B	; 59
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	10 82       	st	Z, r1
     6c6:	40 c0       	rjmp	.+128    	; 0x748 <MDIO_voidSetPortValue+0xec>
					}
					else
					{
						PORTA_REG = copy_u8PortValue;
     6c8:	eb e3       	ldi	r30, 0x3B	; 59
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	80 83       	st	Z, r24
     6d0:	3b c0       	rjmp	.+118    	; 0x748 <MDIO_voidSetPortValue+0xec>
					}
					break;
		case PORTB: if(copy_u8PortValue == HIGH)
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	29 f4       	brne	.+10     	; 0x6e2 <MDIO_voidSetPortValue+0x86>
		            {
		                PORTB_REG = 0xFF;	
     6d8:	e8 e3       	ldi	r30, 0x38	; 56
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	80 83       	st	Z, r24
     6e0:	33 c0       	rjmp	.+102    	; 0x748 <MDIO_voidSetPortValue+0xec>
		            }
					else if(copy_u8PortValue == LOW)
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	88 23       	and	r24, r24
     6e6:	21 f4       	brne	.+8      	; 0x6f0 <MDIO_voidSetPortValue+0x94>
					{
						PORTB_REG = 0x00;
     6e8:	e8 e3       	ldi	r30, 0x38	; 56
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	10 82       	st	Z, r1
     6ee:	2c c0       	rjmp	.+88     	; 0x748 <MDIO_voidSetPortValue+0xec>
					}
					else
					{
						PORTB_REG = copy_u8PortValue;
     6f0:	e8 e3       	ldi	r30, 0x38	; 56
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	80 83       	st	Z, r24
     6f8:	27 c0       	rjmp	.+78     	; 0x748 <MDIO_voidSetPortValue+0xec>
					}
					break;
		case PORTC: if(copy_u8PortValue == HIGH)
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	29 f4       	brne	.+10     	; 0x70a <MDIO_voidSetPortValue+0xae>
		            {
		                PORTC_REG = 0xFF;	
     700:	e5 e3       	ldi	r30, 0x35	; 53
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	80 83       	st	Z, r24
     708:	1f c0       	rjmp	.+62     	; 0x748 <MDIO_voidSetPortValue+0xec>
		            }
					else if(copy_u8PortValue == LOW)
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	88 23       	and	r24, r24
     70e:	21 f4       	brne	.+8      	; 0x718 <MDIO_voidSetPortValue+0xbc>
					{
						PORTC_REG = 0x00;
     710:	e5 e3       	ldi	r30, 0x35	; 53
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	10 82       	st	Z, r1
     716:	18 c0       	rjmp	.+48     	; 0x748 <MDIO_voidSetPortValue+0xec>
					}
					else
					{
						PORTC_REG = copy_u8PortValue;
     718:	e5 e3       	ldi	r30, 0x35	; 53
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	80 83       	st	Z, r24
     720:	13 c0       	rjmp	.+38     	; 0x748 <MDIO_voidSetPortValue+0xec>
					}
					break;
		case PORTD: if(copy_u8PortValue == HIGH)
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	29 f4       	brne	.+10     	; 0x732 <MDIO_voidSetPortValue+0xd6>
		            {
		                PORTD_REG = 0xFF;	
     728:	e2 e3       	ldi	r30, 0x32	; 50
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	80 83       	st	Z, r24
     730:	0b c0       	rjmp	.+22     	; 0x748 <MDIO_voidSetPortValue+0xec>
		            }
					else if(copy_u8PortValue == LOW)
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	88 23       	and	r24, r24
     736:	21 f4       	brne	.+8      	; 0x740 <MDIO_voidSetPortValue+0xe4>
					{
						PORTD_REG = 0x00;
     738:	e2 e3       	ldi	r30, 0x32	; 50
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	10 82       	st	Z, r1
     73e:	04 c0       	rjmp	.+8      	; 0x748 <MDIO_voidSetPortValue+0xec>
					}
					else
					{
						PORTD_REG = copy_u8PortValue;
     740:	e2 e3       	ldi	r30, 0x32	; 50
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	80 83       	st	Z, r24
					}
					break;
		default: /* invalid port id */ break;
	}
}
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <MDIO_voidSetPinDirection>:


void MDIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	00 d0       	rcall	.+0      	; 0x75c <MDIO_voidSetPinDirection+0x6>
     75c:	00 d0       	rcall	.+0      	; 0x75e <MDIO_voidSetPinDirection+0x8>
     75e:	0f 92       	push	r0
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	6a 83       	std	Y+2, r22	; 0x02
     768:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8PortId)
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	28 2f       	mov	r18, r24
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	3d 83       	std	Y+5, r19	; 0x05
     772:	2c 83       	std	Y+4, r18	; 0x04
     774:	8c 81       	ldd	r24, Y+4	; 0x04
     776:	9d 81       	ldd	r25, Y+5	; 0x05
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	91 05       	cpc	r25, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <MDIO_voidSetPinDirection+0x2a>
     77e:	47 c0       	rjmp	.+142    	; 0x80e <MDIO_voidSetPinDirection+0xb8>
     780:	2c 81       	ldd	r18, Y+4	; 0x04
     782:	3d 81       	ldd	r19, Y+5	; 0x05
     784:	22 30       	cpi	r18, 0x02	; 2
     786:	31 05       	cpc	r19, r1
     788:	2c f4       	brge	.+10     	; 0x794 <MDIO_voidSetPinDirection+0x3e>
     78a:	8c 81       	ldd	r24, Y+4	; 0x04
     78c:	9d 81       	ldd	r25, Y+5	; 0x05
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	71 f0       	breq	.+28     	; 0x7ae <MDIO_voidSetPinDirection+0x58>
     792:	cb c0       	rjmp	.+406    	; 0x92a <__stack+0xcb>
     794:	2c 81       	ldd	r18, Y+4	; 0x04
     796:	3d 81       	ldd	r19, Y+5	; 0x05
     798:	22 30       	cpi	r18, 0x02	; 2
     79a:	31 05       	cpc	r19, r1
     79c:	09 f4       	brne	.+2      	; 0x7a0 <MDIO_voidSetPinDirection+0x4a>
     79e:	67 c0       	rjmp	.+206    	; 0x86e <__stack+0xf>
     7a0:	8c 81       	ldd	r24, Y+4	; 0x04
     7a2:	9d 81       	ldd	r25, Y+5	; 0x05
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	91 05       	cpc	r25, r1
     7a8:	09 f4       	brne	.+2      	; 0x7ac <MDIO_voidSetPinDirection+0x56>
     7aa:	91 c0       	rjmp	.+290    	; 0x8ce <__stack+0x6f>
     7ac:	be c0       	rjmp	.+380    	; 0x92a <__stack+0xcb>
	{
		case PORTA: if(copy_u8PinDirection == OUTPUT)
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	a1 f4       	brne	.+40     	; 0x7dc <MDIO_voidSetPinDirection+0x86>
		            {
		                SET_BIT(DDRA_REG, copy_u8PinId);	
     7b4:	aa e3       	ldi	r26, 0x3A	; 58
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	ea e3       	ldi	r30, 0x3A	; 58
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	48 2f       	mov	r20, r24
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	28 2f       	mov	r18, r24
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 2e       	mov	r0, r18
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <MDIO_voidSetPinDirection+0x7c>
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	0a 94       	dec	r0
     7d4:	e2 f7       	brpl	.-8      	; 0x7ce <MDIO_voidSetPinDirection+0x78>
     7d6:	84 2b       	or	r24, r20
     7d8:	8c 93       	st	X, r24
     7da:	a7 c0       	rjmp	.+334    	; 0x92a <__stack+0xcb>
		            }
					else if(copy_u8PinDirection == INPUT)
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	88 23       	and	r24, r24
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <MDIO_voidSetPinDirection+0x8e>
     7e2:	a3 c0       	rjmp	.+326    	; 0x92a <__stack+0xcb>
					{
						CLR_BIT(DDRA_REG, copy_u8PinId);
     7e4:	aa e3       	ldi	r26, 0x3A	; 58
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	ea e3       	ldi	r30, 0x3A	; 58
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	48 2f       	mov	r20, r24
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	02 2e       	mov	r0, r18
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <MDIO_voidSetPinDirection+0xac>
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	0a 94       	dec	r0
     804:	e2 f7       	brpl	.-8      	; 0x7fe <MDIO_voidSetPinDirection+0xa8>
     806:	80 95       	com	r24
     808:	84 23       	and	r24, r20
     80a:	8c 93       	st	X, r24
     80c:	8e c0       	rjmp	.+284    	; 0x92a <__stack+0xcb>
					else
					{
						//error
					}
					break;
		case PORTB: if(copy_u8PinDirection == OUTPUT)
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	a1 f4       	brne	.+40     	; 0x83c <MDIO_voidSetPinDirection+0xe6>
		            {
		                SET_BIT(DDRB_REG, copy_u8PinId);	
     814:	a7 e3       	ldi	r26, 0x37	; 55
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	e7 e3       	ldi	r30, 0x37	; 55
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	48 2f       	mov	r20, r24
     820:	8a 81       	ldd	r24, Y+2	; 0x02
     822:	28 2f       	mov	r18, r24
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	02 2e       	mov	r0, r18
     82c:	02 c0       	rjmp	.+4      	; 0x832 <MDIO_voidSetPinDirection+0xdc>
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	0a 94       	dec	r0
     834:	e2 f7       	brpl	.-8      	; 0x82e <MDIO_voidSetPinDirection+0xd8>
     836:	84 2b       	or	r24, r20
     838:	8c 93       	st	X, r24
     83a:	77 c0       	rjmp	.+238    	; 0x92a <__stack+0xcb>
		            }
					else if(copy_u8PinDirection == INPUT)
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	88 23       	and	r24, r24
     840:	09 f0       	breq	.+2      	; 0x844 <MDIO_voidSetPinDirection+0xee>
     842:	73 c0       	rjmp	.+230    	; 0x92a <__stack+0xcb>
					{
						CLR_BIT(DDRB_REG, copy_u8PinId);
     844:	a7 e3       	ldi	r26, 0x37	; 55
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	e7 e3       	ldi	r30, 0x37	; 55
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	48 2f       	mov	r20, r24
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	28 2f       	mov	r18, r24
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	02 2e       	mov	r0, r18
     85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <MDIO_voidSetPinDirection+0x108>
     866:	80 95       	com	r24
     868:	84 23       	and	r24, r20
     86a:	8c 93       	st	X, r24
     86c:	5e c0       	rjmp	.+188    	; 0x92a <__stack+0xcb>
					else
					{
						//error
					}
					break;
		case PORTC: if(copy_u8PinDirection == OUTPUT)
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	a1 f4       	brne	.+40     	; 0x89c <__stack+0x3d>
		            {
		                SET_BIT(DDRC_REG, copy_u8PinId);	
     874:	a4 e3       	ldi	r26, 0x34	; 52
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e4 e3       	ldi	r30, 0x34	; 52
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	48 2f       	mov	r20, r24
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 2e       	mov	r0, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
     896:	84 2b       	or	r24, r20
     898:	8c 93       	st	X, r24
     89a:	47 c0       	rjmp	.+142    	; 0x92a <__stack+0xcb>
		            }
					else if(copy_u8PinDirection == INPUT)
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	88 23       	and	r24, r24
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <__stack+0x45>
     8a2:	43 c0       	rjmp	.+134    	; 0x92a <__stack+0xcb>
					{
						CLR_BIT(DDRC_REG, copy_u8PinId);
     8a4:	a4 e3       	ldi	r26, 0x34	; 52
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e4 e3       	ldi	r30, 0x34	; 52
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	48 2f       	mov	r20, r24
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 2e       	mov	r0, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	0a 94       	dec	r0
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
     8c6:	80 95       	com	r24
     8c8:	84 23       	and	r24, r20
     8ca:	8c 93       	st	X, r24
     8cc:	2e c0       	rjmp	.+92     	; 0x92a <__stack+0xcb>
					else
					{
						//error
					}
					break;
		case PORTD: if(copy_u8PinDirection == OUTPUT)
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	a1 f4       	brne	.+40     	; 0x8fc <__stack+0x9d>
		            {
		                SET_BIT(DDRD_REG, copy_u8PinId);	
     8d4:	a1 e3       	ldi	r26, 0x31	; 49
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e1 e3       	ldi	r30, 0x31	; 49
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	48 2f       	mov	r20, r24
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	28 2f       	mov	r18, r24
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	02 2e       	mov	r0, r18
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	0a 94       	dec	r0
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	84 2b       	or	r24, r20
     8f8:	8c 93       	st	X, r24
     8fa:	17 c0       	rjmp	.+46     	; 0x92a <__stack+0xcb>
		            }
					else if(copy_u8PinDirection == INPUT)
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	88 23       	and	r24, r24
     900:	a1 f4       	brne	.+40     	; 0x92a <__stack+0xcb>
					{
						CLR_BIT(DDRD_REG, copy_u8PinId);
     902:	a1 e3       	ldi	r26, 0x31	; 49
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	e1 e3       	ldi	r30, 0x31	; 49
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	48 2f       	mov	r20, r24
     90e:	8a 81       	ldd	r24, Y+2	; 0x02
     910:	28 2f       	mov	r18, r24
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	02 2e       	mov	r0, r18
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
     924:	80 95       	com	r24
     926:	84 23       	and	r24, r20
     928:	8c 93       	st	X, r24
						//error
					}
					break;
		default: /* invalid port id  */ break;
	}
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	08 95       	ret

0000093a <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
     93a:	df 93       	push	r29
     93c:	cf 93       	push	r28
     93e:	00 d0       	rcall	.+0      	; 0x940 <MDIO_voidSetPinValue+0x6>
     940:	00 d0       	rcall	.+0      	; 0x942 <MDIO_voidSetPinValue+0x8>
     942:	0f 92       	push	r0
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	89 83       	std	Y+1, r24	; 0x01
     94a:	6a 83       	std	Y+2, r22	; 0x02
     94c:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8PortId)
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	28 2f       	mov	r18, r24
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	3d 83       	std	Y+5, r19	; 0x05
     956:	2c 83       	std	Y+4, r18	; 0x04
     958:	8c 81       	ldd	r24, Y+4	; 0x04
     95a:	9d 81       	ldd	r25, Y+5	; 0x05
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	91 05       	cpc	r25, r1
     960:	09 f4       	brne	.+2      	; 0x964 <MDIO_voidSetPinValue+0x2a>
     962:	47 c0       	rjmp	.+142    	; 0x9f2 <MDIO_voidSetPinValue+0xb8>
     964:	2c 81       	ldd	r18, Y+4	; 0x04
     966:	3d 81       	ldd	r19, Y+5	; 0x05
     968:	22 30       	cpi	r18, 0x02	; 2
     96a:	31 05       	cpc	r19, r1
     96c:	2c f4       	brge	.+10     	; 0x978 <MDIO_voidSetPinValue+0x3e>
     96e:	8c 81       	ldd	r24, Y+4	; 0x04
     970:	9d 81       	ldd	r25, Y+5	; 0x05
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	71 f0       	breq	.+28     	; 0x992 <MDIO_voidSetPinValue+0x58>
     976:	cb c0       	rjmp	.+406    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
     978:	2c 81       	ldd	r18, Y+4	; 0x04
     97a:	3d 81       	ldd	r19, Y+5	; 0x05
     97c:	22 30       	cpi	r18, 0x02	; 2
     97e:	31 05       	cpc	r19, r1
     980:	09 f4       	brne	.+2      	; 0x984 <MDIO_voidSetPinValue+0x4a>
     982:	67 c0       	rjmp	.+206    	; 0xa52 <MDIO_voidSetPinValue+0x118>
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	9d 81       	ldd	r25, Y+5	; 0x05
     988:	83 30       	cpi	r24, 0x03	; 3
     98a:	91 05       	cpc	r25, r1
     98c:	09 f4       	brne	.+2      	; 0x990 <MDIO_voidSetPinValue+0x56>
     98e:	91 c0       	rjmp	.+290    	; 0xab2 <MDIO_voidSetPinValue+0x178>
     990:	be c0       	rjmp	.+380    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
	{
		case PORTA: if(copy_u8PinValue == HIGH)
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	a1 f4       	brne	.+40     	; 0x9c0 <MDIO_voidSetPinValue+0x86>
		            {
		                SET_BIT(PORTA_REG, copy_u8PinId);	
     998:	ab e3       	ldi	r26, 0x3B	; 59
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	eb e3       	ldi	r30, 0x3B	; 59
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	48 2f       	mov	r20, r24
     9a4:	8a 81       	ldd	r24, Y+2	; 0x02
     9a6:	28 2f       	mov	r18, r24
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	02 2e       	mov	r0, r18
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <MDIO_voidSetPinValue+0x7c>
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	0a 94       	dec	r0
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <MDIO_voidSetPinValue+0x78>
     9ba:	84 2b       	or	r24, r20
     9bc:	8c 93       	st	X, r24
     9be:	a7 c0       	rjmp	.+334    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
		            }
					else if(copy_u8PinValue == LOW)
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	88 23       	and	r24, r24
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <MDIO_voidSetPinValue+0x8e>
     9c6:	a3 c0       	rjmp	.+326    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
					{
						CLR_BIT(PORTA_REG, copy_u8PinId);
     9c8:	ab e3       	ldi	r26, 0x3B	; 59
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	eb e3       	ldi	r30, 0x3B	; 59
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	48 2f       	mov	r20, r24
     9d4:	8a 81       	ldd	r24, Y+2	; 0x02
     9d6:	28 2f       	mov	r18, r24
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	02 2e       	mov	r0, r18
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <MDIO_voidSetPinValue+0xac>
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	0a 94       	dec	r0
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <MDIO_voidSetPinValue+0xa8>
     9ea:	80 95       	com	r24
     9ec:	84 23       	and	r24, r20
     9ee:	8c 93       	st	X, r24
     9f0:	8e c0       	rjmp	.+284    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
					else
					{
						//error
					}
					break;
		case PORTB: if(copy_u8PinValue == HIGH)
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	a1 f4       	brne	.+40     	; 0xa20 <MDIO_voidSetPinValue+0xe6>
		            {
		                SET_BIT(PORTB_REG, copy_u8PinId);	
     9f8:	a8 e3       	ldi	r26, 0x38	; 56
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	e8 e3       	ldi	r30, 0x38	; 56
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	48 2f       	mov	r20, r24
     a04:	8a 81       	ldd	r24, Y+2	; 0x02
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	02 2e       	mov	r0, r18
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <MDIO_voidSetPinValue+0xdc>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	0a 94       	dec	r0
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <MDIO_voidSetPinValue+0xd8>
     a1a:	84 2b       	or	r24, r20
     a1c:	8c 93       	st	X, r24
     a1e:	77 c0       	rjmp	.+238    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
		            }
					else if(copy_u8PinValue == LOW)
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	88 23       	and	r24, r24
     a24:	09 f0       	breq	.+2      	; 0xa28 <MDIO_voidSetPinValue+0xee>
     a26:	73 c0       	rjmp	.+230    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
					{
						CLR_BIT(PORTB_REG, copy_u8PinId);
     a28:	a8 e3       	ldi	r26, 0x38	; 56
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	e8 e3       	ldi	r30, 0x38	; 56
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	48 2f       	mov	r20, r24
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	02 2e       	mov	r0, r18
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <MDIO_voidSetPinValue+0x10c>
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	0a 94       	dec	r0
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <MDIO_voidSetPinValue+0x108>
     a4a:	80 95       	com	r24
     a4c:	84 23       	and	r24, r20
     a4e:	8c 93       	st	X, r24
     a50:	5e c0       	rjmp	.+188    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
					else
					{
						//error
					}
					break;
		case PORTC: if(copy_u8PinValue == HIGH)
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	a1 f4       	brne	.+40     	; 0xa80 <MDIO_voidSetPinValue+0x146>
		            {
		                SET_BIT(PORTC_REG, copy_u8PinId);	
     a58:	a5 e3       	ldi	r26, 0x35	; 53
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e5 e3       	ldi	r30, 0x35	; 53
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	48 2f       	mov	r20, r24
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	28 2f       	mov	r18, r24
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 2e       	mov	r0, r18
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <MDIO_voidSetPinValue+0x13c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	0a 94       	dec	r0
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <MDIO_voidSetPinValue+0x138>
     a7a:	84 2b       	or	r24, r20
     a7c:	8c 93       	st	X, r24
     a7e:	47 c0       	rjmp	.+142    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
		            }
					else if(copy_u8PinValue == LOW)
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	88 23       	and	r24, r24
     a84:	09 f0       	breq	.+2      	; 0xa88 <MDIO_voidSetPinValue+0x14e>
     a86:	43 c0       	rjmp	.+134    	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
					{
						CLR_BIT(PORTC_REG, copy_u8PinId);
     a88:	a5 e3       	ldi	r26, 0x35	; 53
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e5 e3       	ldi	r30, 0x35	; 53
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	48 2f       	mov	r20, r24
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	02 2e       	mov	r0, r18
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <MDIO_voidSetPinValue+0x16c>
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <MDIO_voidSetPinValue+0x168>
     aaa:	80 95       	com	r24
     aac:	84 23       	and	r24, r20
     aae:	8c 93       	st	X, r24
     ab0:	2e c0       	rjmp	.+92     	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
					else
					{
						//error
					}
					break;
		case PORTD: if(copy_u8PinValue == HIGH)
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	a1 f4       	brne	.+40     	; 0xae0 <MDIO_voidSetPinValue+0x1a6>
		            {
		                SET_BIT(PORTD_REG, copy_u8PinId);	
     ab8:	a2 e3       	ldi	r26, 0x32	; 50
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	e2 e3       	ldi	r30, 0x32	; 50
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	48 2f       	mov	r20, r24
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	02 2e       	mov	r0, r18
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <MDIO_voidSetPinValue+0x19c>
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	0a 94       	dec	r0
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <MDIO_voidSetPinValue+0x198>
     ada:	84 2b       	or	r24, r20
     adc:	8c 93       	st	X, r24
     ade:	17 c0       	rjmp	.+46     	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
		            }
					else if(copy_u8PinValue == LOW)
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	88 23       	and	r24, r24
     ae4:	a1 f4       	brne	.+40     	; 0xb0e <MDIO_voidSetPinValue+0x1d4>
					{
						CLR_BIT(PORTD_REG, copy_u8PinId);
     ae6:	a2 e3       	ldi	r26, 0x32	; 50
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e2 e3       	ldi	r30, 0x32	; 50
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	48 2f       	mov	r20, r24
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	02 2e       	mov	r0, r18
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <MDIO_voidSetPinValue+0x1ca>
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	0a 94       	dec	r0
     b06:	e2 f7       	brpl	.-8      	; 0xb00 <MDIO_voidSetPinValue+0x1c6>
     b08:	80 95       	com	r24
     b0a:	84 23       	and	r24, r20
     b0c:	8c 93       	st	X, r24
						//error
					}
					break;
		default: /* invalid port id  */ break;
	}
}
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	cf 91       	pop	r28
     b1a:	df 91       	pop	r29
     b1c:	08 95       	ret

00000b1e <MDIO_voidTogglePinValue>:


void MDIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	00 d0       	rcall	.+0      	; 0xb24 <MDIO_voidTogglePinValue+0x6>
     b24:	00 d0       	rcall	.+0      	; 0xb26 <MDIO_voidTogglePinValue+0x8>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	28 2f       	mov	r18, r24
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	3c 83       	std	Y+4, r19	; 0x04
     b36:	2b 83       	std	Y+3, r18	; 0x03
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	91 05       	cpc	r25, r1
     b40:	49 f1       	breq	.+82     	; 0xb94 <MDIO_voidTogglePinValue+0x76>
     b42:	2b 81       	ldd	r18, Y+3	; 0x03
     b44:	3c 81       	ldd	r19, Y+4	; 0x04
     b46:	22 30       	cpi	r18, 0x02	; 2
     b48:	31 05       	cpc	r19, r1
     b4a:	2c f4       	brge	.+10     	; 0xb56 <MDIO_voidTogglePinValue+0x38>
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	61 f0       	breq	.+24     	; 0xb6c <MDIO_voidTogglePinValue+0x4e>
     b54:	5a c0       	rjmp	.+180    	; 0xc0a <MDIO_voidTogglePinValue+0xec>
     b56:	2b 81       	ldd	r18, Y+3	; 0x03
     b58:	3c 81       	ldd	r19, Y+4	; 0x04
     b5a:	22 30       	cpi	r18, 0x02	; 2
     b5c:	31 05       	cpc	r19, r1
     b5e:	71 f1       	breq	.+92     	; 0xbbc <MDIO_voidTogglePinValue+0x9e>
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	83 30       	cpi	r24, 0x03	; 3
     b66:	91 05       	cpc	r25, r1
     b68:	e9 f1       	breq	.+122    	; 0xbe4 <MDIO_voidTogglePinValue+0xc6>
     b6a:	4f c0       	rjmp	.+158    	; 0xc0a <MDIO_voidTogglePinValue+0xec>
	{
		case PORTA: TOG_BIT(PORTA_REG, copy_u8PinId);break;
     b6c:	ab e3       	ldi	r26, 0x3B	; 59
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	eb e3       	ldi	r30, 0x3B	; 59
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	48 2f       	mov	r20, r24
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 2e       	mov	r0, r18
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <MDIO_voidTogglePinValue+0x6c>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <MDIO_voidTogglePinValue+0x68>
     b8e:	84 27       	eor	r24, r20
     b90:	8c 93       	st	X, r24
     b92:	3b c0       	rjmp	.+118    	; 0xc0a <MDIO_voidTogglePinValue+0xec>
		case PORTB: TOG_BIT(PORTB_REG, copy_u8PinId);break;
     b94:	a8 e3       	ldi	r26, 0x38	; 56
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 e3       	ldi	r30, 0x38	; 56
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <MDIO_voidTogglePinValue+0x94>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <MDIO_voidTogglePinValue+0x90>
     bb6:	84 27       	eor	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	27 c0       	rjmp	.+78     	; 0xc0a <MDIO_voidTogglePinValue+0xec>
		case PORTC: TOG_BIT(PORTC_REG, copy_u8PinId);break;
     bbc:	a5 e3       	ldi	r26, 0x35	; 53
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e5 e3       	ldi	r30, 0x35	; 53
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <MDIO_voidTogglePinValue+0xbc>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <MDIO_voidTogglePinValue+0xb8>
     bde:	84 27       	eor	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	13 c0       	rjmp	.+38     	; 0xc0a <MDIO_voidTogglePinValue+0xec>
		case PORTD: TOG_BIT(PORTD_REG, copy_u8PinId);break;
     be4:	a2 e3       	ldi	r26, 0x32	; 50
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e2 e3       	ldi	r30, 0x32	; 50
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <MDIO_voidTogglePinValue+0xe4>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <MDIO_voidTogglePinValue+0xe0>
     c06:	84 27       	eor	r24, r20
     c08:	8c 93       	st	X, r24
		default: /* invalid port id */ break;
	}
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <MDIO_u8GetPinValue>:

u8   MDIO_u8GetPinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <MDIO_u8GetPinValue+0x6>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <MDIO_u8GetPinValue+0x8>
     c20:	0f 92       	push	r0
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	8a 83       	std	Y+2, r24	; 0x02
     c28:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinState;
	switch(copy_u8PortId)
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	3d 83       	std	Y+5, r19	; 0x05
     c32:	2c 83       	std	Y+4, r18	; 0x04
     c34:	4c 81       	ldd	r20, Y+4	; 0x04
     c36:	5d 81       	ldd	r21, Y+5	; 0x05
     c38:	41 30       	cpi	r20, 0x01	; 1
     c3a:	51 05       	cpc	r21, r1
     c3c:	41 f1       	breq	.+80     	; 0xc8e <MDIO_u8GetPinValue+0x76>
     c3e:	8c 81       	ldd	r24, Y+4	; 0x04
     c40:	9d 81       	ldd	r25, Y+5	; 0x05
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	91 05       	cpc	r25, r1
     c46:	34 f4       	brge	.+12     	; 0xc54 <MDIO_u8GetPinValue+0x3c>
     c48:	2c 81       	ldd	r18, Y+4	; 0x04
     c4a:	3d 81       	ldd	r19, Y+5	; 0x05
     c4c:	21 15       	cp	r18, r1
     c4e:	31 05       	cpc	r19, r1
     c50:	61 f0       	breq	.+24     	; 0xc6a <MDIO_u8GetPinValue+0x52>
     c52:	52 c0       	rjmp	.+164    	; 0xcf8 <MDIO_u8GetPinValue+0xe0>
     c54:	4c 81       	ldd	r20, Y+4	; 0x04
     c56:	5d 81       	ldd	r21, Y+5	; 0x05
     c58:	42 30       	cpi	r20, 0x02	; 2
     c5a:	51 05       	cpc	r21, r1
     c5c:	51 f1       	breq	.+84     	; 0xcb2 <MDIO_u8GetPinValue+0x9a>
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	91 05       	cpc	r25, r1
     c66:	b9 f1       	breq	.+110    	; 0xcd6 <MDIO_u8GetPinValue+0xbe>
     c68:	47 c0       	rjmp	.+142    	; 0xcf8 <MDIO_u8GetPinValue+0xe0>
	{
		case PORTA: Local_u8PinState = GET_BIT(PINA_REG, copy_u8PinId);break;
     c6a:	e9 e3       	ldi	r30, 0x39	; 57
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	a9 01       	movw	r20, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <MDIO_u8GetPinValue+0x6a>
     c7e:	55 95       	asr	r21
     c80:	47 95       	ror	r20
     c82:	8a 95       	dec	r24
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <MDIO_u8GetPinValue+0x66>
     c86:	ca 01       	movw	r24, r20
     c88:	81 70       	andi	r24, 0x01	; 1
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	35 c0       	rjmp	.+106    	; 0xcf8 <MDIO_u8GetPinValue+0xe0>
		case PORTB: Local_u8PinState = GET_BIT(PINB_REG, copy_u8PinId);break;
     c8e:	e6 e3       	ldi	r30, 0x36	; 54
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a9 01       	movw	r20, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <MDIO_u8GetPinValue+0x8e>
     ca2:	55 95       	asr	r21
     ca4:	47 95       	ror	r20
     ca6:	8a 95       	dec	r24
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <MDIO_u8GetPinValue+0x8a>
     caa:	ca 01       	movw	r24, r20
     cac:	81 70       	andi	r24, 0x01	; 1
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	23 c0       	rjmp	.+70     	; 0xcf8 <MDIO_u8GetPinValue+0xe0>
		case PORTC: Local_u8PinState = GET_BIT(PINC_REG, copy_u8PinId);break;
     cb2:	e3 e3       	ldi	r30, 0x33	; 51
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a9 01       	movw	r20, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <MDIO_u8GetPinValue+0xb2>
     cc6:	55 95       	asr	r21
     cc8:	47 95       	ror	r20
     cca:	8a 95       	dec	r24
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <MDIO_u8GetPinValue+0xae>
     cce:	ca 01       	movw	r24, r20
     cd0:	81 70       	andi	r24, 0x01	; 1
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	11 c0       	rjmp	.+34     	; 0xcf8 <MDIO_u8GetPinValue+0xe0>
		case PORTD: Local_u8PinState = GET_BIT(PIND_REG, copy_u8PinId);break;
     cd6:	e0 e3       	ldi	r30, 0x30	; 48
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a9 01       	movw	r20, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <MDIO_u8GetPinValue+0xd6>
     cea:	55 95       	asr	r21
     cec:	47 95       	ror	r20
     cee:	8a 95       	dec	r24
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <MDIO_u8GetPinValue+0xd2>
     cf2:	ca 01       	movw	r24, r20
     cf4:	81 70       	andi	r24, 0x01	; 1
     cf6:	89 83       	std	Y+1, r24	; 0x01
		default:  /* invalid port id */ break;
	}
	
	return Local_u8PinState;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <GIE_voidEnable>:
#include "GIE_private.h"
#include "GIE_registers.h"


void GIE_voidEnable(void) 
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     d12:	af e5       	ldi	r26, 0x5F	; 95
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ef e5       	ldi	r30, 0x5F	; 95
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 68       	ori	r24, 0x80	; 128
     d1e:	8c 93       	st	X, r24
}
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     d2e:	af e5       	ldi	r26, 0x5F	; 95
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ef e5       	ldi	r30, 0x5F	; 95
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8f 77       	andi	r24, 0x7F	; 127
     d3a:	8c 93       	st	X, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <SCH_Start>:
#include "TMR0_interface.h"
#include "SCH_interface.h"
#include "SCH_config.h"
#include "SCH_private.h"

void SCH_Start(void){
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	// 1- init for timer 
	// 2- measure time async takes schedule as i/p 
	M_TMR0_void_init();
     d4a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <M_TMR0_void_init>
	M_TMR0_void_MeasureTimeAsync(&schedule);
     d4e:	8f ed       	ldi	r24, 0xDF	; 223
     d50:	96 e0       	ldi	r25, 0x06	; 6
     d52:	0e 94 05 08 	call	0x100a	; 0x100a <M_TMR0_void_MeasureTimeAsync>
	
}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <SCH_Create>:
void SCH_Create(u8 Copy_u8_Priority,u16 Copy_u16_Periodicity,void(*ptr_Task_func)(void))
 {
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <SCH_Create+0x6>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <SCH_Create+0x8>
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	7b 83       	std	Y+3, r23	; 0x03
     d6e:	6a 83       	std	Y+2, r22	; 0x02
     d70:	5d 83       	std	Y+5, r21	; 0x05
     d72:	4c 83       	std	Y+4, r20	; 0x04
	 taskARR[Copy_u8_Priority].periodicity = Copy_u16_Periodicity;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	fc 01       	movw	r30, r24
     d84:	ee 58       	subi	r30, 0x8E	; 142
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	9b 81       	ldd	r25, Y+3	; 0x03
     d8c:	91 83       	std	Z+1, r25	; 0x01
     d8e:	80 83       	st	Z, r24
	 taskARR[Copy_u8_Priority].taskFunc = ptr_Task_func;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	fc 01       	movw	r30, r24
     da2:	ee 58       	subi	r30, 0x8E	; 142
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
	 
 }
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <schedule>:
 static void schedule (void) {
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	0f 92       	push	r0
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	 
	 // called at fixed time 
	 static u16 Local_u16_TickCount = 0 ;
	 Local_u16_TickCount++;
     dc8:	80 91 7a 00 	lds	r24, 0x007A
     dcc:	90 91 7b 00 	lds	r25, 0x007B
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	90 93 7b 00 	sts	0x007B, r25
     dd6:	80 93 7a 00 	sts	0x007A, r24
	 for (u8 Local_u8_TaskCount = 0 ; Local_u8_TaskCount < MAX_TASKS; Local_u8_TaskCount++ )
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	28 c0       	rjmp	.+80     	; 0xe2e <schedule+0x70>
	 {
		 if (Local_u16_TickCount % taskARR[Local_u8_TaskCount].periodicity == 0 ) 
     dde:	40 91 7a 00 	lds	r20, 0x007A
     de2:	50 91 7b 00 	lds	r21, 0x007B
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	fc 01       	movw	r30, r24
     df6:	ee 58       	subi	r30, 0x8E	; 142
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	20 81       	ld	r18, Z
     dfc:	31 81       	ldd	r19, Z+1	; 0x01
     dfe:	ca 01       	movw	r24, r20
     e00:	b9 01       	movw	r22, r18
     e02:	0e 94 ae 0c 	call	0x195c	; 0x195c <__udivmodhi4>
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	79 f4       	brne	.+30     	; 0xe28 <schedule+0x6a>
		 {
			 taskARR[Local_u8_TaskCount].taskFunc();
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	fc 01       	movw	r30, r24
     e1c:	ee 58       	subi	r30, 0x8E	; 142
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	01 90       	ld	r0, Z+
     e22:	f0 81       	ld	r31, Z
     e24:	e0 2d       	mov	r30, r0
     e26:	09 95       	icall
 static void schedule (void) {
	 
	 // called at fixed time 
	 static u16 Local_u16_TickCount = 0 ;
	 Local_u16_TickCount++;
	 for (u8 Local_u8_TaskCount = 0 ; Local_u8_TaskCount < MAX_TASKS; Local_u8_TaskCount++ )
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	a8 f2       	brcs	.-86     	; 0xdde <schedule+0x20>
		 if (Local_u16_TickCount % taskARR[Local_u8_TaskCount].periodicity == 0 ) 
		 {
			 taskARR[Local_u8_TaskCount].taskFunc();
		 }
	 }
 }
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <Spi_voidMasterInit>:
static void (*SPI_Global_pu8NotificationFunc) (void) = NULL ;



void Spi_voidMasterInit(void)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62

	/*Master selection*/
	SET_BIT(SPCR,SPCR_MSTR);
     e44:	ad e2       	ldi	r26, 0x2D	; 45
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ed e2       	ldi	r30, 0x2D	; 45
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 61       	ori	r24, 0x10	; 16
     e50:	8c 93       	st	X, r24

	// Clock

	SET_BIT(SPCR,SPCR_SPR0);
     e52:	ad e2       	ldi	r26, 0x2D	; 45
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ed e2       	ldi	r30, 0x2D	; 45
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
     e60:	ad e2       	ldi	r26, 0x2D	; 45
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ed e2       	ldi	r30, 0x2D	; 45
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
     e6e:	ae e2       	ldi	r26, 0x2E	; 46
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ee e2       	ldi	r30, 0x2E	; 46
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
     e7c:	ad e2       	ldi	r26, 0x2D	; 45
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ed e2       	ldi	r30, 0x2D	; 45
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	8c 93       	st	X, r24




}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <Spi_voidSlaveInit>:
void Spi_voidSlaveInit(void)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
     e98:	ad e2       	ldi	r26, 0x2D	; 45
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ed e2       	ldi	r30, 0x2D	; 45
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8c 93       	st	X, r24

	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
     ea6:	ad e2       	ldi	r26, 0x2D	; 45
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ed e2       	ldi	r30, 0x2D	; 45
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <Spi_u8Trancieve>:

u8 Spi_u8Trancieve(u8 copy_u8Data)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
	SPDR =copy_u8Data;
     ec6:	ef e2       	ldi	r30, 0x2F	; 47
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	80 83       	st	Z, r24
	while ((GET_BIT(SPSR,SPSR_SPIF)) == 0);
     ece:	ee e2       	ldi	r30, 0x2E	; 46
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 23       	and	r24, r24
     ed6:	dc f7       	brge	.-10     	; 0xece <Spi_u8Trancieve+0x14>

	return SPDR ;
     ed8:	ef e2       	ldi	r30, 0x2F	; 47
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z


}
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <MSPI_voidTranseiverDataAsynch>:
void MSPI_voidTranseiverDataAsynch(u8 *Copy_u8Data,void(*copy_pu8CallBack)(void) )
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <MSPI_voidTranseiverDataAsynch+0x6>
     eec:	00 d0       	rcall	.+0      	; 0xeee <MSPI_voidTranseiverDataAsynch+0x8>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	7c 83       	std	Y+4, r23	; 0x04
     ef8:	6b 83       	std	Y+3, r22	; 0x03
	/*Enable Spi Interrupt*/
	//SPDR = *Copy_u8Data ;

	SET_BIT(SPCR,SPCR_SPIE);
     efa:	ad e2       	ldi	r26, 0x2D	; 45
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ed e2       	ldi	r30, 0x2D	; 45
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	8c 93       	st	X, r24
	SPI_Global_pu8NotificationFunc=copy_pu8CallBack;
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	90 93 7f 00 	sts	0x007F, r25
     f10:	80 93 7e 00 	sts	0x007E, r24
	MSPI_uint8ReceiveData = Copy_u8Data ;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	90 93 7d 00 	sts	0x007D, r25
     f1c:	80 93 7c 00 	sts	0x007C, r24

}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <__vector_12>:


void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
	*MSPI_uint8ReceiveData = SPDR;
     f58:	a0 91 7c 00 	lds	r26, 0x007C
     f5c:	b0 91 7d 00 	lds	r27, 0x007D
     f60:	ef e2       	ldi	r30, 0x2F	; 47
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8c 93       	st	X, r24
	SPI_Global_pu8NotificationFunc();
     f68:	e0 91 7e 00 	lds	r30, 0x007E
     f6c:	f0 91 7f 00 	lds	r31, 0x007F
     f70:	09 95       	icall





	CLR_BIT(SPCR,SPCR_SPIE);
     f72:	ad e2       	ldi	r26, 0x2D	; 45
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ed e2       	ldi	r30, 0x2D	; 45
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 77       	andi	r24, 0x7F	; 127
     f7e:	8c 93       	st	X, r24
}
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	7f 91       	pop	r23
     f92:	6f 91       	pop	r22
     f94:	5f 91       	pop	r21
     f96:	4f 91       	pop	r20
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <M_TMR0_void_init>:
#include "TMR0_registers.h"
/*global pointer to function*/
 void (*G_ptr_TMR0_Notification)(void)= 0;

void M_TMR0_void_init(void)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
   /* set prescaller */
	TCCR0 = (TCCR0 & TMR0_CLOCK_SELECT_MASKING ) | TMR0_CLOCK_SELECT ;
     fae:	a3 e5       	ldi	r26, 0x53	; 83
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e3 e5       	ldi	r30, 0x53	; 83
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8c 7f       	andi	r24, 0xFC	; 252
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	8c 93       	st	X, r24

	   CLR_BIT(TCCR0,TCCR0_WGM00);
     fbe:	a3 e5       	ldi	r26, 0x53	; 83
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e3 e5       	ldi	r30, 0x53	; 83
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8f 7b       	andi	r24, 0xBF	; 191
     fca:	8c 93       	st	X, r24
	   CLR_BIT(TCCR0,TCCR0_WGM01);
     fcc:	a3 e5       	ldi	r26, 0x53	; 83
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e3 e5       	ldi	r30, 0x53	; 83
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	87 7f       	andi	r24, 0xF7	; 247
     fd8:	8c 93       	st	X, r24
	   CLR_BIT(TCCR0,TCCR0_WGM01);


#elif  TMR0_Mode == TMR0_MODE_CTC

	   CLR_BIT(TCCR0,TCCR0_WGM00);
     fda:	a3 e5       	ldi	r26, 0x53	; 83
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 e5       	ldi	r30, 0x53	; 83
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7b       	andi	r24, 0xBF	; 191
     fe6:	8c 93       	st	X, r24
	   SET_BIT(TCCR0,TCCR0_WGM01);
     fe8:	a3 e5       	ldi	r26, 0x53	; 83
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e3 e5       	ldi	r30, 0x53	; 83
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	8c 93       	st	X, r24
	   /*set the compare top value*/
	  	   OCR0 = TMR0_CTC_TOP ;
     ff6:	ec e5       	ldi	r30, 0x5C	; 92
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24

#endif*/


	/* set preload */
	   TCNT0 =TMR0_PRELOAD_VALUE ;
     ffe:	e2 e5       	ldi	r30, 0x52	; 82
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	10 82       	st	Z, r1


}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <M_TMR0_void_MeasureTimeAsync>:
void M_TMR0_void_MeasureTimeAsync(void (*ptr_TMR0_SetCallBack)(void))
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <M_TMR0_void_MeasureTimeAsync+0x6>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
	/*enable the interupt for the required mode*/
 #if TMR0_Mode == TMR0_MODE_NORMAL
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TMR0_Mode == TMR0_MODE_CTC
	SET_BIT(TIMSK,TIMSK_OCIE0);
    1018:	a9 e5       	ldi	r26, 0x59	; 89
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e9 e5       	ldi	r30, 0x59	; 89
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	8c 93       	st	X, r24
#endif*/
	G_ptr_TMR0_Notification =  ptr_TMR0_SetCallBack ;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	90 93 81 00 	sts	0x0081, r25
    102e:	80 93 80 00 	sts	0x0080, r24
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <M_TMR0_void_SetCompareMatchValue>:

void M_TMR0_void_SetCompareMatchValue(u8 copy_u8_Value){
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = copy_u8_Value ;
    1048:	ec e5       	ldi	r30, 0x5C	; 92
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	80 83       	st	Z, r24
}
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <__vector_10>:
void __vector_10 (void)
{
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	2f 93       	push	r18
    1064:	3f 93       	push	r19
    1066:	4f 93       	push	r20
    1068:	5f 93       	push	r21
    106a:	6f 93       	push	r22
    106c:	7f 93       	push	r23
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	ef 93       	push	r30
    1078:	ff 93       	push	r31
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
/*CTC ISR*/

		G_ptr_TMR0_Notification();
    1082:	e0 91 80 00 	lds	r30, 0x0080
    1086:	f0 91 81 00 	lds	r31, 0x0081
    108a:	09 95       	icall


}
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	ff 91       	pop	r31
    1092:	ef 91       	pop	r30
    1094:	bf 91       	pop	r27
    1096:	af 91       	pop	r26
    1098:	9f 91       	pop	r25
    109a:	8f 91       	pop	r24
    109c:	7f 91       	pop	r23
    109e:	6f 91       	pop	r22
    10a0:	5f 91       	pop	r21
    10a2:	4f 91       	pop	r20
    10a4:	3f 91       	pop	r19
    10a6:	2f 91       	pop	r18
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <__vector_11>:
void __vector_11 (void)
{
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
    10bc:	2f 93       	push	r18
    10be:	3f 93       	push	r19
    10c0:	4f 93       	push	r20
    10c2:	5f 93       	push	r21
    10c4:	6f 93       	push	r22
    10c6:	7f 93       	push	r23
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	af 93       	push	r26
    10ce:	bf 93       	push	r27
    10d0:	ef 93       	push	r30
    10d2:	ff 93       	push	r31
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
/*OV ISR*/
	G_ptr_TMR0_Notification();
    10dc:	e0 91 80 00 	lds	r30, 0x0080
    10e0:	f0 91 81 00 	lds	r31, 0x0081
    10e4:	09 95       	icall




}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <M_TMR1_void_init>:
#include "TMR1_registers.h"



void M_TMR1_void_init(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	/*Timer 1 Mode = FastPWm Set on top Clear on compare*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1114:	af e4       	ldi	r26, 0x4F	; 79
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ef e4       	ldi	r30, 0x4F	; 79
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1122:	af e4       	ldi	r26, 0x4F	; 79
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ef e4       	ldi	r30, 0x4F	; 79
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7b       	andi	r24, 0xBF	; 191
    112e:	8c 93       	st	X, r24

	/*Choosing the wave generation mode for fast pwm icr1 is the top value*/
	SET_BIT(TCCR1A,TCCR1A_WGM11); // TCCR1A REG
    1130:	af e4       	ldi	r26, 0x4F	; 79
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ef e4       	ldi	r30, 0x4F	; 79
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	82 60       	ori	r24, 0x02	; 2
    113c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM10); // TCCR1A REG
    113e:	af e4       	ldi	r26, 0x4F	; 79
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ef e4       	ldi	r30, 0x4F	; 79
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8e 7f       	andi	r24, 0xFE	; 254
    114a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13); // TCCR1B REG
    114c:	ae e4       	ldi	r26, 0x4E	; 78
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ee e4       	ldi	r30, 0x4E	; 78
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 61       	ori	r24, 0x10	; 16
    1158:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12); // TCCR1B REG
    115a:	ae e4       	ldi	r26, 0x4E	; 78
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ee e4       	ldi	r30, 0x4E	; 78
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	88 60       	ori	r24, 0x08	; 8
    1166:	8c 93       	st	X, r24
	/*prescaller Choosing  = div by 8 */
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1168:	ae e4       	ldi	r26, 0x4E	; 78
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ee e4       	ldi	r30, 0x4E	; 78
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8b 7f       	andi	r24, 0xFB	; 251
    1174:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1176:	ae e4       	ldi	r26, 0x4E	; 78
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	ee e4       	ldi	r30, 0x4E	; 78
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1184:	ae e4       	ldi	r26, 0x4E	; 78
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	ee e4       	ldi	r30, 0x4E	; 78
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8e 7f       	andi	r24, 0xFE	; 254
    1190:	8c 93       	st	X, r24
}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <M_TMR1_void_SetTopValue>:

void M_TMR1_void_SetTopValue(u16 copy_u16_Value)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <M_TMR1_void_SetTopValue+0x6>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
	ICR1L = copy_u16_Value ;
    11a6:	e6 e4       	ldi	r30, 0x46	; 70
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	80 83       	st	Z, r24


}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <M_TMR1_void_SetCompareMatchValue>:

void M_TMR1_void_SetCompareMatchValue(u16 copy_u16_Value)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <M_TMR1_void_SetCompareMatchValue+0x6>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL = copy_u16_Value ;
    11ca:	ea e4       	ldi	r30, 0x4A	; 74
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24

}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <M_USART_voidInit>:
#include "USART_config.h"
u8 *UART_u8ReceiveData;
static void (*UART_Global_pu8NotificationRecievedFunc) (void) = NULL ;

void M_USART_voidInit(void) 
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	0f 92       	push	r0
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	/*full duplex*/
	SET_BIT(UCSRB ,UCSRB_RXEN);
    11ea:	aa e2       	ldi	r26, 0x2A	; 42
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ea e2       	ldi	r30, 0x2A	; 42
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 61       	ori	r24, 0x10	; 16
    11f6:	8c 93       	st	X, r24
	SET_BIT(UCSRB ,UCSRB_TXEN);
    11f8:	aa e2       	ldi	r26, 0x2A	; 42
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ea e2       	ldi	r30, 0x2A	; 42
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	88 60       	ori	r24, 0x08	; 8
    1204:	8c 93       	st	X, r24
	/*select the baudrate*/
	UBRRL=51;
    1206:	e9 e2       	ldi	r30, 0x29	; 41
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	83 e3       	ldi	r24, 0x33	; 51
    120c:	80 83       	st	Z, r24
	u8  Local_UCSRC = 0;
    120e:	19 82       	std	Y+1, r1	; 0x01
	/*setting for the ucsrc values*/
	/*to enable writing to the UCSRC*/
	SET_BIT(Local_UCSRC,UCSRC_URSEL);
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	89 83       	std	Y+1, r24	; 0x01
	/*SELECTING THE MODE*/
	CLR_BIT(Local_UCSRC,UCSRC_UMSEL);
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	8f 7b       	andi	r24, 0xBF	; 191
    121a:	89 83       	std	Y+1, r24	; 0x01
	/*SELECTING THE parity*/
	CLR_BIT(Local_UCSRC,UCSRC_UPM1);
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	8f 7d       	andi	r24, 0xDF	; 223
    1220:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC,UCSRC_UPM0);
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	89 83       	std	Y+1, r24	; 0x01
	/*SELECTING # of stop bytes*/
	CLR_BIT(Local_UCSRC,UCSRC_USBS);
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	87 7f       	andi	r24, 0xF7	; 247
    122c:	89 83       	std	Y+1, r24	; 0x01
	/*SELECTING the ch size*/
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    122e:	aa e2       	ldi	r26, 0x2A	; 42
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ea e2       	ldi	r30, 0x2A	; 42
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8b 7f       	andi	r24, 0xFB	; 251
    123a:	8c 93       	st	X, r24
	SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	84 60       	ori	r24, 0x04	; 4
    1240:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	82 60       	ori	r24, 0x02	; 2
    1246:	89 83       	std	Y+1, r24	; 0x01
	/*SELECTING THE clock polarity*/
	SET_BIT(Local_UCSRC,UCSRC_UCPOL);
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	89 83       	std	Y+1, r24	; 0x01
	
	UCSRC = Local_UCSRC ;
    124e:	e0 e4       	ldi	r30, 0x40	; 64
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	80 83       	st	Z, r24

	
	
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <M_USART_voidSendByte>:

void M_USART_voidSendByte(u8 copy_u8_byte)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	89 83       	std	Y+1, r24	; 0x01
	/*checking the buffer*/
	while (GET_BIT(UCSRA ,UCSRA_UDRE)!= 1) ;
    126a:	eb e2       	ldi	r30, 0x2B	; 43
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	82 95       	swap	r24
    1272:	86 95       	lsr	r24
    1274:	87 70       	andi	r24, 0x07	; 7
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	90 70       	andi	r25, 0x00	; 0
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	a1 f3       	breq	.-24     	; 0x126a <M_USART_voidSendByte+0xc>
	UDR = copy_u8_byte ;
    1282:	ec e2       	ldi	r30, 0x2C	; 44
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	80 83       	st	Z, r24
	
	
}
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <M_USART_u8_RecieveByte>:


u8 M_USART_u8_RecieveByte()
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <M_USART_u8_RecieveByte+0x6>
    1298:	00 d0       	rcall	.+0      	; 0x129a <M_USART_u8_RecieveByte+0x8>
    129a:	0f 92       	push	r0
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	u32 Counter = 0;
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	1a 82       	std	Y+2, r1	; 0x02
    12a4:	1b 82       	std	Y+3, r1	; 0x03
    12a6:	1c 82       	std	Y+4, r1	; 0x04
    12a8:	0b c0       	rjmp	.+22     	; 0x12c0 <M_USART_u8_RecieveByte+0x2e>

	/*checking THE COMPLETION OF RECEPTION*/
	while ((GET_BIT(UCSRA,UCSRA_RXC) != 1) && (Counter != 100000))
	{
		Counter++;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	ab 81       	ldd	r26, Y+3	; 0x03
    12b0:	bc 81       	ldd	r27, Y+4	; 0x04
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	a1 1d       	adc	r26, r1
    12b6:	b1 1d       	adc	r27, r1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	ab 83       	std	Y+3, r26	; 0x03
    12be:	bc 83       	std	Y+4, r27	; 0x04
u8 M_USART_u8_RecieveByte()
{
	u32 Counter = 0;

	/*checking THE COMPLETION OF RECEPTION*/
	while ((GET_BIT(UCSRA,UCSRA_RXC) != 1) && (Counter != 100000))
    12c0:	eb e2       	ldi	r30, 0x2B	; 43
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 1f       	adc	r24, r24
    12c8:	88 27       	eor	r24, r24
    12ca:	88 1f       	adc	r24, r24
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <M_USART_u8_RecieveByte+0x56>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	ab 81       	ldd	r26, Y+3	; 0x03
    12d6:	bc 81       	ldd	r27, Y+4	; 0x04
    12d8:	80 3a       	cpi	r24, 0xA0	; 160
    12da:	26 e8       	ldi	r18, 0x86	; 134
    12dc:	92 07       	cpc	r25, r18
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	a2 07       	cpc	r26, r18
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	b2 07       	cpc	r27, r18
    12e6:	09 f7       	brne	.-62     	; 0x12aa <M_USART_u8_RecieveByte+0x18>
	{
		Counter++;

	}
	if (Counter==100000)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	ab 81       	ldd	r26, Y+3	; 0x03
    12ee:	bc 81       	ldd	r27, Y+4	; 0x04
    12f0:	80 3a       	cpi	r24, 0xA0	; 160
    12f2:	26 e8       	ldi	r18, 0x86	; 134
    12f4:	92 07       	cpc	r25, r18
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	a2 07       	cpc	r26, r18
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	b2 07       	cpc	r27, r18
    12fe:	11 f4       	brne	.+4      	; 0x1304 <M_USART_u8_RecieveByte+0x72>
	{
		return 0 ;
    1300:	1d 82       	std	Y+5, r1	; 0x05
    1302:	04 c0       	rjmp	.+8      	; 0x130c <M_USART_u8_RecieveByte+0x7a>

	}
	else
	{
		return UDR ;
    1304:	ec e2       	ldi	r30, 0x2C	; 44
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	
	

}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <M_USART_u8_Send_Number>:

void M_USART_u8_Send_Number (u8 copy_u8_Number) {
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	a1 97       	sbiw	r28, 0x21	; 33
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	89 a3       	std	Y+33, r24	; 0x21
	s8 * localPtr_str[16] = {0};
    1334:	80 e2       	ldi	r24, 0x20	; 32
    1336:	fe 01       	movw	r30, r28
    1338:	31 96       	adiw	r30, 0x01	; 1
    133a:	df 01       	movw	r26, r30
    133c:	98 2f       	mov	r25, r24
    133e:	1d 92       	st	X+, r1
    1340:	9a 95       	dec	r25
    1342:	e9 f7       	brne	.-6      	; 0x133e <M_USART_u8_Send_Number+0x20>
	itoa(copy_u8_Number, (char *)localPtr_str, 10);
    1344:	89 a1       	ldd	r24, Y+33	; 0x21
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9e 01       	movw	r18, r28
    134c:	2f 5f       	subi	r18, 0xFF	; 255
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	b9 01       	movw	r22, r18
    1352:	4a e0       	ldi	r20, 0x0A	; 10
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <itoa>
	M_USART_void_Send_String((u8 *)localPtr_str);
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	0e 94 ba 09 	call	0x1374	; 0x1374 <M_USART_void_Send_String>
}
    1362:	a1 96       	adiw	r28, 0x21	; 33
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <M_USART_void_Send_String>:
void M_USART_void_Send_String(u8 *ptr_u8_S_String)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <M_USART_void_Send_String+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	0a c0       	rjmp	.+20     	; 0x1398 <M_USART_void_Send_String+0x24>
    while(*ptr_u8_S_String != '\0')
    {M_USART_voidSendByte(*ptr_u8_S_String);
    1384:	e9 81       	ldd	r30, Y+1	; 0x01
    1386:	fa 81       	ldd	r31, Y+2	; 0x02
    1388:	80 81       	ld	r24, Z
    138a:	0e 94 2f 09 	call	0x125e	; 0x125e <M_USART_voidSendByte>
    ptr_u8_S_String++;}
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
	itoa(copy_u8_Number, (char *)localPtr_str, 10);
	M_USART_void_Send_String((u8 *)localPtr_str);
}
void M_USART_void_Send_String(u8 *ptr_u8_S_String)
{
    while(*ptr_u8_S_String != '\0')
    1398:	e9 81       	ldd	r30, Y+1	; 0x01
    139a:	fa 81       	ldd	r31, Y+2	; 0x02
    139c:	80 81       	ld	r24, Z
    139e:	88 23       	and	r24, r24
    13a0:	89 f7       	brne	.-30     	; 0x1384 <M_USART_void_Send_String+0x10>
    {M_USART_voidSendByte(*ptr_u8_S_String);
    ptr_u8_S_String++;}

}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <M_USART_void_Recieve_String>:
void *M_USART_void_Recieve_String(u8 *ptr_u8_R_String,u8 End_Of_String)
{
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <M_USART_void_Recieve_String+0xa>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <M_USART_void_Recieve_String+0xc>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <M_USART_void_Recieve_String+0xe>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	9b 83       	std	Y+3, r25	; 0x03
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6c 83       	std	Y+4, r22	; 0x04

	 u8   counter ;

	//receive the characters until letter is insert
	for (  counter=0  ; ; counter++)
    13c4:	19 82       	std	Y+1, r1	; 0x01
	{

	 //and store the received characters into the array string[] one-by-one


		ptr_u8_R_String[counter] =M_USART_u8_RecieveByte();
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	8c 01       	movw	r16, r24
    13d2:	02 0f       	add	r16, r18
    13d4:	13 1f       	adc	r17, r19
    13d6:	0e 94 49 09 	call	0x1292	; 0x1292 <M_USART_u8_RecieveByte>
    13da:	f8 01       	movw	r30, r16
    13dc:	80 83       	st	Z, r24
		if (ptr_u8_R_String[counter] == End_Of_String )
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	fc 01       	movw	r30, r24
    13ea:	e2 0f       	add	r30, r18
    13ec:	f3 1f       	adc	r31, r19
    13ee:	90 81       	ld	r25, Z
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	98 17       	cp	r25, r24
    13f4:	21 f0       	breq	.+8      	; 0x13fe <M_USART_void_Recieve_String+0x52>
{

	 u8   counter ;

	//receive the characters until letter is insert
	for (  counter=0  ; ; counter++)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	8f 5f       	subi	r24, 0xFF	; 255
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	e4 cf       	rjmp	.-56     	; 0x13c6 <M_USART_void_Recieve_String+0x1a>
		}


	}
	//insert NULL to terminate the string
	ptr_u8_R_String[counter] = '\0';
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	9b 81       	ldd	r25, Y+3	; 0x03
    1408:	fc 01       	movw	r30, r24
    140a:	e2 0f       	add	r30, r18
    140c:	f3 1f       	adc	r31, r19
    140e:	10 82       	st	Z, r1
	//return the received string

	}
    1410:	26 96       	adiw	r28, 0x06	; 6
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <M_USART_void_RecieveByteAsync>:



void M_USART_void_RecieveByteAsync(u8 *copy_u8Data ,void (*copy_pu8CallBack) (void) )
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <M_USART_void_RecieveByteAsync+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <M_USART_void_RecieveByteAsync+0x8>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	7c 83       	std	Y+4, r23	; 0x04
    1438:	6b 83       	std	Y+3, r22	; 0x03
	SET_BIT(UCSRB,UCSRB_RXCIE);
    143a:	aa e2       	ldi	r26, 0x2A	; 42
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ea e2       	ldi	r30, 0x2A	; 42
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	8c 93       	st	X, r24
	UART_Global_pu8NotificationRecievedFunc=copy_pu8CallBack;
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	90 93 83 00 	sts	0x0083, r25
    1450:	80 93 82 00 	sts	0x0082, r24
	UART_u8ReceiveData = copy_u8Data ;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	90 93 89 00 	sts	0x0089, r25
    145c:	80 93 88 00 	sts	0x0088, r24

}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <__vector_13>:
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62

	*UART_u8ReceiveData = UDR ;
    1498:	a0 91 88 00 	lds	r26, 0x0088
    149c:	b0 91 89 00 	lds	r27, 0x0089
    14a0:	ec e2       	ldi	r30, 0x2C	; 44
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8c 93       	st	X, r24
	UART_Global_pu8NotificationRecievedFunc();
    14a8:	e0 91 82 00 	lds	r30, 0x0082
    14ac:	f0 91 83 00 	lds	r31, 0x0083
    14b0:	09 95       	icall





	CLR_BIT(UCSRB,UCSRB_RXCIE);
    14b2:	aa e2       	ldi	r26, 0x2A	; 42
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ea e2       	ldi	r30, 0x2A	; 42
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 77       	andi	r24, 0x7F	; 127
    14be:	8c 93       	st	X, r24
}
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	bf 91       	pop	r27
    14ca:	af 91       	pop	r26
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	7f 91       	pop	r23
    14d2:	6f 91       	pop	r22
    14d4:	5f 91       	pop	r21
    14d6:	4f 91       	pop	r20
    14d8:	3f 91       	pop	r19
    14da:	2f 91       	pop	r18
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <main>:
u8 AutoAdjustFan = 0;
u8 status[3];
u8 counter ;
void Setup(void);
int main (void)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62


     Setup();
    14ee:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Setup>
	while (1)
	{



		ADC_u8ReadChainI(&sensors);
    14f2:	81 e9       	ldi	r24, 0x91	; 145
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 c6 01 	call	0x38c	; 0x38c <ADC_u8ReadChainI>
		M_USART_void_RecieveByteAsync(&Uart_Recieved_Byte,&Uart_Recieving_Handler);
    14fa:	84 e8       	ldi	r24, 0x84	; 132
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	26 ea       	ldi	r18, 0xA6	; 166
    1500:	3b e0       	ldi	r19, 0x0B	; 11
    1502:	b9 01       	movw	r22, r18
    1504:	0e 94 13 0a 	call	0x1426	; 0x1426 <M_USART_void_RecieveByteAsync>
		MSPI_voidTranseiverDataAsynch(&Spi_Recieved_Byte,&Spi_Recieving_Handler);
    1508:	85 e8       	ldi	r24, 0x85	; 133
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	2a e7       	ldi	r18, 0x7A	; 122
    150e:	3c e0       	ldi	r19, 0x0C	; 12
    1510:	b9 01       	movw	r22, r18
    1512:	0e 94 73 07 	call	0xee6	; 0xee6 <MSPI_voidTranseiverDataAsynch>
    1516:	ed cf       	rjmp	.-38     	; 0x14f2 <main+0xc>

00001518 <Setup>:



}
void Setup(void)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	/*ADC Chain paramters*/
	sensors.Channels = &SensorsChannels;
    1520:	80 e6       	ldi	r24, 0x60	; 96
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	90 93 92 00 	sts	0x0092, r25
    1528:	80 93 91 00 	sts	0x0091, r24
	sensors.size = 3 ;
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	80 93 95 00 	sts	0x0095, r24
	sensors.result = &SensorsResults ;
    1532:	8a e8       	ldi	r24, 0x8A	; 138
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	90 93 94 00 	sts	0x0094, r25
    153a:	80 93 93 00 	sts	0x0093, r24
	sensors.NotiFunc = &ISR;
    153e:	81 ee       	ldi	r24, 0xE1	; 225
    1540:	9a e0       	ldi	r25, 0x0A	; 10
    1542:	90 93 97 00 	sts	0x0097, r25
    1546:	80 93 96 00 	sts	0x0096, r24

	MDIO_voidSetPortDirection(PORTC,OUTPUT); // Output Port PORTC (PIN0 -> LED .. PIN1 -> FAN ..  PIN2 -> BUZZER .. PIN3 DOOR )
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	0e 94 c5 02 	call	0x58a	; 0x58a <MDIO_voidSetPortDirection>
	MDIO_voidSetPinValue(PORTC,PIN3,HIGH);
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	63 e0       	ldi	r22, 0x03	; 3
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>


	MDIO_voidSetPinDirection(PORTA,PIN0,INPUT); // Tempreture Sensor Pin PortA Pin0
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	0e 94 ab 03 	call	0x756	; 0x756 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN1,INPUT); // Gas Sensor Pin PortA Pin1
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	0e 94 ab 03 	call	0x756	; 0x756 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN2,INPUT); // LDR Sensor Pin PortA Pin2
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	62 e0       	ldi	r22, 0x02	; 2
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 ab 03 	call	0x756	; 0x756 <MDIO_voidSetPinDirection>


	/*SPI PINS INTI*/
	MDIO_voidSetPinDirection(PORTB,PIN5,INPUT); // MOSI
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	65 e0       	ldi	r22, 0x05	; 5
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	0e 94 ab 03 	call	0x756	; 0x756 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTB,PIN7,INPUT);  // CLock
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	67 e0       	ldi	r22, 0x07	; 7
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	0e 94 ab 03 	call	0x756	; 0x756 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTB,PIN6,OUTPUT); // MISO
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	66 e0       	ldi	r22, 0x06	; 6
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 ab 03 	call	0x756	; 0x756 <MDIO_voidSetPinDirection>


	MDIO_voidSetPinDirection(PORTB,PIN4,INPUT); //SS
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	64 e0       	ldi	r22, 0x04	; 4
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 ab 03 	call	0x756	; 0x756 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinValue(PORTB,PIN4,LOW);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	64 e0       	ldi	r22, 0x04	; 4
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>

	/*Prephirals Intitiation*/
	ADC_voidInit();
    15ac:	0e 94 b7 00 	call	0x16e	; 0x16e <ADC_voidInit>
	Spi_voidSlaveInit();
    15b0:	0e 94 48 07 	call	0xe90	; 0xe90 <Spi_voidSlaveInit>
	M_USART_voidInit();
    15b4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <M_USART_voidInit>
//	M_TMR1_void_init();
	GIE_voidEnable();
    15b8:	0e 94 85 06 	call	0xd0a	; 0xd0a <GIE_voidEnable>





}
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <ISR>:


void ISR (void)
{
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
//	SensorsResults[LIGHT_READING]      = MAP(0,1024,0,100,SensorsResults[LIGHT_READING]);


	/*Handling The Gas Leakage*/

	if (MAP(0,1024,0,100,SensorsResults[GAS_READING]) >= 5 )
    15ce:	80 91 8c 00 	lds	r24, 0x008C
    15d2:	90 91 8d 00 	lds	r25, 0x008D
    15d6:	fc 01       	movw	r30, r24
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	74 e0       	ldi	r23, 0x04	; 4
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	24 e6       	ldi	r18, 0x64	; 100
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	8f 01       	movw	r16, r30
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <MAP>
    15ee:	85 30       	cpi	r24, 0x05	; 5
    15f0:	91 05       	cpc	r25, r1
    15f2:	34 f0       	brlt	.+12     	; 0x1600 <ISR+0x3e>
	{
		MDIO_voidSetPinValue(PORTC,PIN2,HIGH); // buzzer bin portc pin 2
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
    15fe:	18 c0       	rjmp	.+48     	; 0x1630 <ISR+0x6e>

	}
	else if (MAP(0,1024,0,100,SensorsResults[GAS_READING])<5)
    1600:	80 91 8c 00 	lds	r24, 0x008C
    1604:	90 91 8d 00 	lds	r25, 0x008D
    1608:	fc 01       	movw	r30, r24
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	74 e0       	ldi	r23, 0x04	; 4
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	24 e6       	ldi	r18, 0x64	; 100
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8f 01       	movw	r16, r30
    161c:	0e 94 49 00 	call	0x92	; 0x92 <MAP>
    1620:	85 30       	cpi	r24, 0x05	; 5
    1622:	91 05       	cpc	r25, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <ISR+0x6e>
	{
		MDIO_voidSetPinValue(PORTC,PIN2,LOW);
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	62 e0       	ldi	r22, 0x02	; 2
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>

	}

	/*Handling High Tempreture*/

	if (AutoAdjustFan==1)
    1630:	80 91 87 00 	lds	r24, 0x0087
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	09 f0       	breq	.+2      	; 0x163a <ISR+0x78>
    1638:	4a c0       	rjmp	.+148    	; 0x16ce <ISR+0x10c>
	{
		if (GET_TEMP(SensorsResults[TEMPRETURE_READING])>=25)
    163a:	80 91 8a 00 	lds	r24, 0x008A
    163e:	90 91 8b 00 	lds	r25, 0x008B
    1642:	cc 01       	movw	r24, r24
    1644:	a0 e0       	ldi	r26, 0x00	; 0
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	28 e8       	ldi	r18, 0x88	; 136
    164a:	33 e1       	ldi	r19, 0x13	; 19
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 8f 0c 	call	0x191e	; 0x191e <__mulsi3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	07 2e       	mov	r0, r23
    165e:	7a e0       	ldi	r23, 0x0A	; 10
    1660:	b6 95       	lsr	r27
    1662:	a7 95       	ror	r26
    1664:	97 95       	ror	r25
    1666:	87 95       	ror	r24
    1668:	7a 95       	dec	r23
    166a:	d1 f7       	brne	.-12     	; 0x1660 <ISR+0x9e>
    166c:	70 2d       	mov	r23, r0
    166e:	8a 3f       	cpi	r24, 0xFA	; 250
    1670:	91 05       	cpc	r25, r1
    1672:	48 f0       	brcs	.+18     	; 0x1686 <ISR+0xc4>
		{
			MDIO_voidSetPinValue(PORTC,PIN1,HIGH);  // fan pin portc pin1
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
			status[FAN_STATUS]=1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	80 93 99 00 	sts	0x0099, r24
    1684:	24 c0       	rjmp	.+72     	; 0x16ce <ISR+0x10c>

		}
		else if (GET_TEMP(SensorsResults[TEMPRETURE_READING])<25)
    1686:	80 91 8a 00 	lds	r24, 0x008A
    168a:	90 91 8b 00 	lds	r25, 0x008B
    168e:	cc 01       	movw	r24, r24
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	28 e8       	ldi	r18, 0x88	; 136
    1696:	33 e1       	ldi	r19, 0x13	; 19
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 8f 0c 	call	0x191e	; 0x191e <__mulsi3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	07 2e       	mov	r0, r23
    16aa:	7a e0       	ldi	r23, 0x0A	; 10
    16ac:	b6 95       	lsr	r27
    16ae:	a7 95       	ror	r26
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	7a 95       	dec	r23
    16b6:	d1 f7       	brne	.-12     	; 0x16ac <ISR+0xea>
    16b8:	70 2d       	mov	r23, r0
    16ba:	8a 3f       	cpi	r24, 0xFA	; 250
    16bc:	91 05       	cpc	r25, r1
    16be:	38 f4       	brcc	.+14     	; 0x16ce <ISR+0x10c>
		{
			MDIO_voidSetPinValue(PORTC,PIN1,LOW);
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
			status[FAN_STATUS]=0;
    16ca:	10 92 99 00 	sts	0x0099, r1

		}
	}


	if (AutoAdjustLight==1)
    16ce:	80 91 86 00 	lds	r24, 0x0086
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	b1 f5       	brne	.+108    	; 0x1742 <ISR+0x180>
	{
		if (MAP(0,1024,0,100,SensorsResults[LIGHT_READING])>=35)
    16d6:	80 91 8e 00 	lds	r24, 0x008E
    16da:	90 91 8f 00 	lds	r25, 0x008F
    16de:	fc 01       	movw	r30, r24
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	74 e0       	ldi	r23, 0x04	; 4
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	24 e6       	ldi	r18, 0x64	; 100
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8f 01       	movw	r16, r30
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <MAP>
    16f6:	83 32       	cpi	r24, 0x23	; 35
    16f8:	91 05       	cpc	r25, r1
    16fa:	44 f0       	brlt	.+16     	; 0x170c <ISR+0x14a>
		{
			MDIO_voidSetPinValue(PORTC,PIN0,LOW);  // led pin is  portc pin0
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
			status[LIGHT_STATUS]=0;
    1706:	10 92 9a 00 	sts	0x009A, r1
    170a:	1b c0       	rjmp	.+54     	; 0x1742 <ISR+0x180>
		}
		else if (MAP(0,1024,0,100,SensorsResults[LIGHT_READING])<35)
    170c:	80 91 8e 00 	lds	r24, 0x008E
    1710:	90 91 8f 00 	lds	r25, 0x008F
    1714:	fc 01       	movw	r30, r24
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	74 e0       	ldi	r23, 0x04	; 4
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	24 e6       	ldi	r18, 0x64	; 100
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	8f 01       	movw	r16, r30
    1728:	0e 94 49 00 	call	0x92	; 0x92 <MAP>
    172c:	83 32       	cpi	r24, 0x23	; 35
    172e:	91 05       	cpc	r25, r1
    1730:	44 f4       	brge	.+16     	; 0x1742 <ISR+0x180>
		{
			MDIO_voidSetPinValue(PORTC,PIN0,HIGH);
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
			status[LIGHT_STATUS]=1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 9a 00 	sts	0x009A, r24





	}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	08 95       	ret

0000174c <Uart_Recieving_Handler>:

void Uart_Recieving_Handler (void)
{
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
			if (Uart_Recieved_Byte == 'u')
    1758:	80 91 84 00 	lds	r24, 0x0084
    175c:	85 37       	cpi	r24, 0x75	; 117
    175e:	09 f0       	breq	.+2      	; 0x1762 <Uart_Recieving_Handler+0x16>
    1760:	5c c0       	rjmp	.+184    	; 0x181a <Uart_Recieving_Handler+0xce>
			{

				M_USART_u8_Send_Number(GET_TEMP(SensorsResults[TEMPRETURE_READING])); // send tempreture value
    1762:	80 91 8a 00 	lds	r24, 0x008A
    1766:	90 91 8b 00 	lds	r25, 0x008B
    176a:	cc 01       	movw	r24, r24
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	28 e8       	ldi	r18, 0x88	; 136
    1772:	33 e1       	ldi	r19, 0x13	; 19
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__mulsi3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	07 2e       	mov	r0, r23
    1786:	7a e0       	ldi	r23, 0x0A	; 10
    1788:	b6 95       	lsr	r27
    178a:	a7 95       	ror	r26
    178c:	97 95       	ror	r25
    178e:	87 95       	ror	r24
    1790:	7a 95       	dec	r23
    1792:	d1 f7       	brne	.-12     	; 0x1788 <Uart_Recieving_Handler+0x3c>
    1794:	70 2d       	mov	r23, r0
    1796:	2a e0       	ldi	r18, 0x0A	; 10
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	b9 01       	movw	r22, r18
    179c:	0e 94 ae 0c 	call	0x195c	; 0x195c <__udivmodhi4>
    17a0:	cb 01       	movw	r24, r22
    17a2:	0e 94 8f 09 	call	0x131e	; 0x131e <M_USART_u8_Send_Number>
				M_USART_voidSendByte(' ');
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	0e 94 2f 09 	call	0x125e	; 0x125e <M_USART_voidSendByte>
				M_USART_u8_Send_Number(MAP(0,1024,0,100,SensorsResults[GAS_READING]));// send gas leakage value
    17ac:	80 91 8c 00 	lds	r24, 0x008C
    17b0:	90 91 8d 00 	lds	r25, 0x008D
    17b4:	fc 01       	movw	r30, r24
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	74 e0       	ldi	r23, 0x04	; 4
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	24 e6       	ldi	r18, 0x64	; 100
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8f 01       	movw	r16, r30
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <MAP>
    17cc:	0e 94 8f 09 	call	0x131e	; 0x131e <M_USART_u8_Send_Number>
				M_USART_voidSendByte(' ');
    17d0:	80 e2       	ldi	r24, 0x20	; 32
    17d2:	0e 94 2f 09 	call	0x125e	; 0x125e <M_USART_voidSendByte>
				M_USART_u8_Send_Number(MAP(0,1024,0,100,SensorsResults[LIGHT_READING])); // send Light intensity value
    17d6:	80 91 8e 00 	lds	r24, 0x008E
    17da:	90 91 8f 00 	lds	r25, 0x008F
    17de:	fc 01       	movw	r30, r24
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	74 e0       	ldi	r23, 0x04	; 4
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	24 e6       	ldi	r18, 0x64	; 100
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	8f 01       	movw	r16, r30
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <MAP>
    17f6:	0e 94 8f 09 	call	0x131e	; 0x131e <M_USART_u8_Send_Number>
				M_USART_voidSendByte(' ');
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	0e 94 2f 09 	call	0x125e	; 0x125e <M_USART_voidSendByte>
				M_USART_u8_Send_Number(status[DOOR_STATUS]); // sending the door status
    1800:	80 91 98 00 	lds	r24, 0x0098
    1804:	0e 94 8f 09 	call	0x131e	; 0x131e <M_USART_u8_Send_Number>
				M_USART_u8_Send_Number(status[FAN_STATUS]); // sending the fan status
    1808:	80 91 99 00 	lds	r24, 0x0099
    180c:	0e 94 8f 09 	call	0x131e	; 0x131e <M_USART_u8_Send_Number>
				M_USART_u8_Send_Number(status[LIGHT_STATUS]); // sending the light status
    1810:	80 91 9a 00 	lds	r24, 0x009A
    1814:	0e 94 8f 09 	call	0x131e	; 0x131e <M_USART_u8_Send_Number>
    1818:	68 c0       	rjmp	.+208    	; 0x18ea <Uart_Recieving_Handler+0x19e>

			}
			else if (Uart_Recieved_Byte=='1')
    181a:	80 91 84 00 	lds	r24, 0x0084
    181e:	81 33       	cpi	r24, 0x31	; 49
    1820:	49 f4       	brne	.+18     	; 0x1834 <Uart_Recieving_Handler+0xe8>
			{
				MDIO_voidSetPinValue(PORTC,PIN3,LOW);
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	63 e0       	ldi	r22, 0x03	; 3
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
				status[DOOR_STATUS]= 1 ; // door is opened
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	80 93 98 00 	sts	0x0098, r24
    1832:	5b c0       	rjmp	.+182    	; 0x18ea <Uart_Recieving_Handler+0x19e>


			}
			else if (Uart_Recieved_Byte == '2')
    1834:	80 91 84 00 	lds	r24, 0x0084
    1838:	82 33       	cpi	r24, 0x32	; 50
    183a:	41 f4       	brne	.+16     	; 0x184c <Uart_Recieving_Handler+0x100>
			{
				MDIO_voidSetPinValue(PORTC,PIN3,HIGH);
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	63 e0       	ldi	r22, 0x03	; 3
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
				status[DOOR_STATUS]= 0 ; // door is closed
    1846:	10 92 98 00 	sts	0x0098, r1
    184a:	4f c0       	rjmp	.+158    	; 0x18ea <Uart_Recieving_Handler+0x19e>

			}
			else if (Uart_Recieved_Byte == '3')
    184c:	80 91 84 00 	lds	r24, 0x0084
    1850:	83 33       	cpi	r24, 0x33	; 51
    1852:	49 f4       	brne	.+18     	; 0x1866 <Uart_Recieving_Handler+0x11a>
			{
				MDIO_voidSetPinValue(PORTC,PIN0,HIGH);
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
				status[LIGHT_STATUS]= 1 ; //light is open
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	80 93 9a 00 	sts	0x009A, r24
    1864:	42 c0       	rjmp	.+132    	; 0x18ea <Uart_Recieving_Handler+0x19e>

			}
			else if (Uart_Recieved_Byte == '4')
    1866:	80 91 84 00 	lds	r24, 0x0084
    186a:	84 33       	cpi	r24, 0x34	; 52
    186c:	41 f4       	brne	.+16     	; 0x187e <Uart_Recieving_Handler+0x132>
			{
				MDIO_voidSetPinValue(PORTC,PIN0,LOW);
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
				status[LIGHT_STATUS]= 0 ; // light is closed
    1878:	10 92 9a 00 	sts	0x009A, r1
    187c:	36 c0       	rjmp	.+108    	; 0x18ea <Uart_Recieving_Handler+0x19e>


			}
			else if (Uart_Recieved_Byte == '5')
    187e:	80 91 84 00 	lds	r24, 0x0084
    1882:	85 33       	cpi	r24, 0x35	; 53
    1884:	49 f4       	brne	.+18     	; 0x1898 <Uart_Recieving_Handler+0x14c>
			{
				MDIO_voidSetPinValue(PORTC,PIN1,HIGH);
    1886:	82 e0       	ldi	r24, 0x02	; 2
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
				status[FAN_STATUS]= 1 ; // fan is open
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 93 99 00 	sts	0x0099, r24
    1896:	29 c0       	rjmp	.+82     	; 0x18ea <Uart_Recieving_Handler+0x19e>


			}
			else if (Uart_Recieved_Byte == '6')
    1898:	80 91 84 00 	lds	r24, 0x0084
    189c:	86 33       	cpi	r24, 0x36	; 54
    189e:	41 f4       	brne	.+16     	; 0x18b0 <Uart_Recieving_Handler+0x164>
			{
				MDIO_voidSetPinValue(PORTC,PIN1,LOW);
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
				status [FAN_STATUS]= 0 ; // fan is closed
    18aa:	10 92 99 00 	sts	0x0099, r1
    18ae:	1d c0       	rjmp	.+58     	; 0x18ea <Uart_Recieving_Handler+0x19e>

			}
			else if (Uart_Recieved_Byte == '7')
    18b0:	80 91 84 00 	lds	r24, 0x0084
    18b4:	87 33       	cpi	r24, 0x37	; 55
    18b6:	21 f4       	brne	.+8      	; 0x18c0 <Uart_Recieving_Handler+0x174>
			{
				AutoAdjustLight=1; // auto adjust light
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 86 00 	sts	0x0086, r24
    18be:	15 c0       	rjmp	.+42     	; 0x18ea <Uart_Recieving_Handler+0x19e>

			}
			else if (Uart_Recieved_Byte == '8')
    18c0:	80 91 84 00 	lds	r24, 0x0084
    18c4:	88 33       	cpi	r24, 0x38	; 56
    18c6:	19 f4       	brne	.+6      	; 0x18ce <Uart_Recieving_Handler+0x182>
			{

				AutoAdjustLight=0; //self adjust light
    18c8:	10 92 86 00 	sts	0x0086, r1
    18cc:	0e c0       	rjmp	.+28     	; 0x18ea <Uart_Recieving_Handler+0x19e>

			}
			else if (Uart_Recieved_Byte == '9')
    18ce:	80 91 84 00 	lds	r24, 0x0084
    18d2:	89 33       	cpi	r24, 0x39	; 57
    18d4:	21 f4       	brne	.+8      	; 0x18de <Uart_Recieving_Handler+0x192>
			{
				AutoAdjustFan=1; //auto adjust fan
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	80 93 87 00 	sts	0x0087, r24
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <Uart_Recieving_Handler+0x19e>

			}
			else if (Uart_Recieved_Byte == 'a')
    18de:	80 91 84 00 	lds	r24, 0x0084
    18e2:	81 36       	cpi	r24, 0x61	; 97
    18e4:	11 f4       	brne	.+4      	; 0x18ea <Uart_Recieving_Handler+0x19e>
			{

				AutoAdjustFan=0; //self adjust fan
    18e6:	10 92 87 00 	sts	0x0087, r1
			}




}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	08 95       	ret

000018f4 <Spi_Recieving_Handler>:


void Spi_Recieving_Handler (void)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
//	static u8 counter = 0 ;
	if (Spi_Recieved_Byte==1)
    18fc:	80 91 85 00 	lds	r24, 0x0085
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	51 f4       	brne	.+20     	; 0x1918 <Spi_Recieving_Handler+0x24>
//
//
//		if (counter==2)
//		{
			// Open the Door
			MDIO_voidSetPinValue(PORTC,PIN3,LOW);
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	63 e0       	ldi	r22, 0x03	; 3
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	0e 94 9d 04 	call	0x93a	; 0x93a <MDIO_voidSetPinValue>
			status[DOOR_STATUS]= 1 ; // door is opened
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	80 93 98 00 	sts	0x0098, r24
			counter = 0;
    1914:	10 92 90 00 	sts	0x0090, r1
	}
	else
	{

	}
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <__mulsi3>:
    191e:	62 9f       	mul	r22, r18
    1920:	d0 01       	movw	r26, r0
    1922:	73 9f       	mul	r23, r19
    1924:	f0 01       	movw	r30, r0
    1926:	82 9f       	mul	r24, r18
    1928:	e0 0d       	add	r30, r0
    192a:	f1 1d       	adc	r31, r1
    192c:	64 9f       	mul	r22, r20
    192e:	e0 0d       	add	r30, r0
    1930:	f1 1d       	adc	r31, r1
    1932:	92 9f       	mul	r25, r18
    1934:	f0 0d       	add	r31, r0
    1936:	83 9f       	mul	r24, r19
    1938:	f0 0d       	add	r31, r0
    193a:	74 9f       	mul	r23, r20
    193c:	f0 0d       	add	r31, r0
    193e:	65 9f       	mul	r22, r21
    1940:	f0 0d       	add	r31, r0
    1942:	99 27       	eor	r25, r25
    1944:	72 9f       	mul	r23, r18
    1946:	b0 0d       	add	r27, r0
    1948:	e1 1d       	adc	r30, r1
    194a:	f9 1f       	adc	r31, r25
    194c:	63 9f       	mul	r22, r19
    194e:	b0 0d       	add	r27, r0
    1950:	e1 1d       	adc	r30, r1
    1952:	f9 1f       	adc	r31, r25
    1954:	bd 01       	movw	r22, r26
    1956:	cf 01       	movw	r24, r30
    1958:	11 24       	eor	r1, r1
    195a:	08 95       	ret

0000195c <__udivmodhi4>:
    195c:	aa 1b       	sub	r26, r26
    195e:	bb 1b       	sub	r27, r27
    1960:	51 e1       	ldi	r21, 0x11	; 17
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <__udivmodhi4_ep>

00001964 <__udivmodhi4_loop>:
    1964:	aa 1f       	adc	r26, r26
    1966:	bb 1f       	adc	r27, r27
    1968:	a6 17       	cp	r26, r22
    196a:	b7 07       	cpc	r27, r23
    196c:	10 f0       	brcs	.+4      	; 0x1972 <__udivmodhi4_ep>
    196e:	a6 1b       	sub	r26, r22
    1970:	b7 0b       	sbc	r27, r23

00001972 <__udivmodhi4_ep>:
    1972:	88 1f       	adc	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	5a 95       	dec	r21
    1978:	a9 f7       	brne	.-22     	; 0x1964 <__udivmodhi4_loop>
    197a:	80 95       	com	r24
    197c:	90 95       	com	r25
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	08 95       	ret

00001984 <__divmodhi4>:
    1984:	97 fb       	bst	r25, 7
    1986:	09 2e       	mov	r0, r25
    1988:	07 26       	eor	r0, r23
    198a:	0a d0       	rcall	.+20     	; 0x19a0 <__divmodhi4_neg1>
    198c:	77 fd       	sbrc	r23, 7
    198e:	04 d0       	rcall	.+8      	; 0x1998 <__divmodhi4_neg2>
    1990:	e5 df       	rcall	.-54     	; 0x195c <__udivmodhi4>
    1992:	06 d0       	rcall	.+12     	; 0x19a0 <__divmodhi4_neg1>
    1994:	00 20       	and	r0, r0
    1996:	1a f4       	brpl	.+6      	; 0x199e <__divmodhi4_exit>

00001998 <__divmodhi4_neg2>:
    1998:	70 95       	com	r23
    199a:	61 95       	neg	r22
    199c:	7f 4f       	sbci	r23, 0xFF	; 255

0000199e <__divmodhi4_exit>:
    199e:	08 95       	ret

000019a0 <__divmodhi4_neg1>:
    19a0:	f6 f7       	brtc	.-4      	; 0x199e <__divmodhi4_exit>
    19a2:	90 95       	com	r25
    19a4:	81 95       	neg	r24
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	08 95       	ret

000019aa <itoa>:
    19aa:	fb 01       	movw	r30, r22
    19ac:	9f 01       	movw	r18, r30
    19ae:	e8 94       	clt
    19b0:	42 30       	cpi	r20, 0x02	; 2
    19b2:	c4 f0       	brlt	.+48     	; 0x19e4 <itoa+0x3a>
    19b4:	45 32       	cpi	r20, 0x25	; 37
    19b6:	b4 f4       	brge	.+44     	; 0x19e4 <itoa+0x3a>
    19b8:	4a 30       	cpi	r20, 0x0A	; 10
    19ba:	29 f4       	brne	.+10     	; 0x19c6 <itoa+0x1c>
    19bc:	97 fb       	bst	r25, 7
    19be:	1e f4       	brtc	.+6      	; 0x19c6 <itoa+0x1c>
    19c0:	90 95       	com	r25
    19c2:	81 95       	neg	r24
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	64 2f       	mov	r22, r20
    19c8:	77 27       	eor	r23, r23
    19ca:	0e 94 ae 0c 	call	0x195c	; 0x195c <__udivmodhi4>
    19ce:	80 5d       	subi	r24, 0xD0	; 208
    19d0:	8a 33       	cpi	r24, 0x3A	; 58
    19d2:	0c f0       	brlt	.+2      	; 0x19d6 <itoa+0x2c>
    19d4:	89 5d       	subi	r24, 0xD9	; 217
    19d6:	81 93       	st	Z+, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	a1 f7       	brne	.-24     	; 0x19c6 <itoa+0x1c>
    19de:	16 f4       	brtc	.+4      	; 0x19e4 <itoa+0x3a>
    19e0:	5d e2       	ldi	r21, 0x2D	; 45
    19e2:	51 93       	st	Z+, r21
    19e4:	10 82       	st	Z, r1
    19e6:	c9 01       	movw	r24, r18
    19e8:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <strrev>

000019ec <strrev>:
    19ec:	dc 01       	movw	r26, r24
    19ee:	fc 01       	movw	r30, r24
    19f0:	67 2f       	mov	r22, r23
    19f2:	71 91       	ld	r23, Z+
    19f4:	77 23       	and	r23, r23
    19f6:	e1 f7       	brne	.-8      	; 0x19f0 <strrev+0x4>
    19f8:	32 97       	sbiw	r30, 0x02	; 2
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <strrev+0x18>
    19fc:	7c 91       	ld	r23, X
    19fe:	6d 93       	st	X+, r22
    1a00:	70 83       	st	Z, r23
    1a02:	62 91       	ld	r22, -Z
    1a04:	ae 17       	cp	r26, r30
    1a06:	bf 07       	cpc	r27, r31
    1a08:	c8 f3       	brcs	.-14     	; 0x19fc <strrev+0x10>
    1a0a:	08 95       	ret

00001a0c <_exit>:
    1a0c:	f8 94       	cli

00001a0e <__stop_program>:
    1a0e:	ff cf       	rjmp	.-2      	; 0x1a0e <__stop_program>
